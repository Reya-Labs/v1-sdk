/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface FactoryInterface extends ethers.utils.Interface {
  functions: {
    "deployIrsInstance(address,address,uint256,uint256,int24)": FunctionFragment;
    "getFCMAddress(address,address,uint256,uint256,int24)": FunctionFragment;
    "getMarginEngineAddress(address,address,uint256,uint256,int24)": FunctionFragment;
    "getVAMMAddress(address,address,uint256,uint256,int24)": FunctionFragment;
    "isApproved(address,address)": FunctionFragment;
    "masterFCMs(uint8)": FunctionFragment;
    "masterMarginEngine()": FunctionFragment;
    "masterVAMM()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setApproval(address,bool)": FunctionFragment;
    "setMasterFCM(address,address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "deployIrsInstance",
    values: [string, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFCMAddress",
    values: [string, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarginEngineAddress",
    values: [string, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVAMMAddress",
    values: [string, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isApproved",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "masterFCMs",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "masterMarginEngine",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "masterVAMM",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setApproval",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setMasterFCM",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "deployIrsInstance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFCMAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarginEngineAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVAMMAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isApproved", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "masterFCMs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "masterMarginEngine",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "masterVAMM", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApproval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMasterFCM",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "IrsInstanceDeployed(address,address,uint256,uint256,int24,address,address,address)": EventFragment;
    "MasterFCMSet(address,address,uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "IrsInstanceDeployed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MasterFCMSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type IrsInstanceDeployedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, number, string, string, string] & {
    underlyingToken: string;
    rateOracle: string;
    termStartTimestampWad: BigNumber;
    termEndTimestampWad: BigNumber;
    tickSpacing: number;
    marginEngine: string;
    vamm: string;
    fcm: string;
  }
>;

export type MasterFCMSetEvent = TypedEvent<
  [string, string, number] & {
    masterFCMAddressOld: string;
    masterFCMAddress: string;
    yieldBearingProtocolID: number;
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export class Factory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: FactoryInterface;

  functions: {
    deployIrsInstance(
      _underlyingToken: string,
      _rateOracle: string,
      _termStartTimestampWad: BigNumberish,
      _termEndTimestampWad: BigNumberish,
      _tickSpacing: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getFCMAddress(
      _underlyingToken: string,
      _rateOracle: string,
      _termStartTimestampWad: BigNumberish,
      _termEndTimestampWad: BigNumberish,
      _tickSpacing: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getMarginEngineAddress(
      _underlyingToken: string,
      _rateOracle: string,
      _termStartTimestampWad: BigNumberish,
      _termEndTimestampWad: BigNumberish,
      _tickSpacing: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getVAMMAddress(
      _underlyingToken: string,
      _rateOracle: string,
      _termStartTimestampWad: BigNumberish,
      _termEndTimestampWad: BigNumberish,
      _tickSpacing: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    isApproved(
      _owner: string,
      intAddress: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    masterFCMs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    masterMarginEngine(overrides?: CallOverrides): Promise<[string]>;

    masterVAMM(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setApproval(
      intAddress: string,
      allowIntegration: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMasterFCM(
      masterFCMAddress: string,
      _rateOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  deployIrsInstance(
    _underlyingToken: string,
    _rateOracle: string,
    _termStartTimestampWad: BigNumberish,
    _termEndTimestampWad: BigNumberish,
    _tickSpacing: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getFCMAddress(
    _underlyingToken: string,
    _rateOracle: string,
    _termStartTimestampWad: BigNumberish,
    _termEndTimestampWad: BigNumberish,
    _tickSpacing: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getMarginEngineAddress(
    _underlyingToken: string,
    _rateOracle: string,
    _termStartTimestampWad: BigNumberish,
    _termEndTimestampWad: BigNumberish,
    _tickSpacing: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getVAMMAddress(
    _underlyingToken: string,
    _rateOracle: string,
    _termStartTimestampWad: BigNumberish,
    _termEndTimestampWad: BigNumberish,
    _tickSpacing: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  isApproved(
    _owner: string,
    intAddress: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  masterFCMs(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  masterMarginEngine(overrides?: CallOverrides): Promise<string>;

  masterVAMM(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setApproval(
    intAddress: string,
    allowIntegration: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMasterFCM(
    masterFCMAddress: string,
    _rateOracle: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    deployIrsInstance(
      _underlyingToken: string,
      _rateOracle: string,
      _termStartTimestampWad: BigNumberish,
      _termEndTimestampWad: BigNumberish,
      _tickSpacing: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & {
        marginEngineProxy: string;
        vammProxy: string;
        fcmProxy: string;
      }
    >;

    getFCMAddress(
      _underlyingToken: string,
      _rateOracle: string,
      _termStartTimestampWad: BigNumberish,
      _termEndTimestampWad: BigNumberish,
      _tickSpacing: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getMarginEngineAddress(
      _underlyingToken: string,
      _rateOracle: string,
      _termStartTimestampWad: BigNumberish,
      _termEndTimestampWad: BigNumberish,
      _tickSpacing: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getVAMMAddress(
      _underlyingToken: string,
      _rateOracle: string,
      _termStartTimestampWad: BigNumberish,
      _termEndTimestampWad: BigNumberish,
      _tickSpacing: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    isApproved(
      _owner: string,
      intAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    masterFCMs(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    masterMarginEngine(overrides?: CallOverrides): Promise<string>;

    masterVAMM(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setApproval(
      intAddress: string,
      allowIntegration: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setMasterFCM(
      masterFCMAddress: string,
      _rateOracle: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "IrsInstanceDeployed(address,address,uint256,uint256,int24,address,address,address)"(
      underlyingToken?: string | null,
      rateOracle?: string | null,
      termStartTimestampWad?: null,
      termEndTimestampWad?: null,
      tickSpacing?: null,
      marginEngine?: null,
      vamm?: null,
      fcm?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, number, string, string, string],
      {
        underlyingToken: string;
        rateOracle: string;
        termStartTimestampWad: BigNumber;
        termEndTimestampWad: BigNumber;
        tickSpacing: number;
        marginEngine: string;
        vamm: string;
        fcm: string;
      }
    >;

    IrsInstanceDeployed(
      underlyingToken?: string | null,
      rateOracle?: string | null,
      termStartTimestampWad?: null,
      termEndTimestampWad?: null,
      tickSpacing?: null,
      marginEngine?: null,
      vamm?: null,
      fcm?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, number, string, string, string],
      {
        underlyingToken: string;
        rateOracle: string;
        termStartTimestampWad: BigNumber;
        termEndTimestampWad: BigNumber;
        tickSpacing: number;
        marginEngine: string;
        vamm: string;
        fcm: string;
      }
    >;

    "MasterFCMSet(address,address,uint8)"(
      masterFCMAddressOld?: null,
      masterFCMAddress?: null,
      yieldBearingProtocolID?: null
    ): TypedEventFilter<
      [string, string, number],
      {
        masterFCMAddressOld: string;
        masterFCMAddress: string;
        yieldBearingProtocolID: number;
      }
    >;

    MasterFCMSet(
      masterFCMAddressOld?: null,
      masterFCMAddress?: null,
      yieldBearingProtocolID?: null
    ): TypedEventFilter<
      [string, string, number],
      {
        masterFCMAddressOld: string;
        masterFCMAddress: string;
        yieldBearingProtocolID: number;
      }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    deployIrsInstance(
      _underlyingToken: string,
      _rateOracle: string,
      _termStartTimestampWad: BigNumberish,
      _termEndTimestampWad: BigNumberish,
      _tickSpacing: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getFCMAddress(
      _underlyingToken: string,
      _rateOracle: string,
      _termStartTimestampWad: BigNumberish,
      _termEndTimestampWad: BigNumberish,
      _tickSpacing: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarginEngineAddress(
      _underlyingToken: string,
      _rateOracle: string,
      _termStartTimestampWad: BigNumberish,
      _termEndTimestampWad: BigNumberish,
      _tickSpacing: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVAMMAddress(
      _underlyingToken: string,
      _rateOracle: string,
      _termStartTimestampWad: BigNumberish,
      _termEndTimestampWad: BigNumberish,
      _tickSpacing: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isApproved(
      _owner: string,
      intAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    masterFCMs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    masterMarginEngine(overrides?: CallOverrides): Promise<BigNumber>;

    masterVAMM(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setApproval(
      intAddress: string,
      allowIntegration: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMasterFCM(
      masterFCMAddress: string,
      _rateOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    deployIrsInstance(
      _underlyingToken: string,
      _rateOracle: string,
      _termStartTimestampWad: BigNumberish,
      _termEndTimestampWad: BigNumberish,
      _tickSpacing: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getFCMAddress(
      _underlyingToken: string,
      _rateOracle: string,
      _termStartTimestampWad: BigNumberish,
      _termEndTimestampWad: BigNumberish,
      _tickSpacing: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarginEngineAddress(
      _underlyingToken: string,
      _rateOracle: string,
      _termStartTimestampWad: BigNumberish,
      _termEndTimestampWad: BigNumberish,
      _tickSpacing: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVAMMAddress(
      _underlyingToken: string,
      _rateOracle: string,
      _termStartTimestampWad: BigNumberish,
      _termEndTimestampWad: BigNumberish,
      _tickSpacing: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApproved(
      _owner: string,
      intAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    masterFCMs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    masterMarginEngine(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    masterVAMM(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setApproval(
      intAddress: string,
      allowIntegration: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMasterFCM(
      masterFCMAddress: string,
      _rateOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
