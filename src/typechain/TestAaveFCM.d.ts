/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface TestAaveFCMInterface extends ethers.utils.Interface {
  functions: {
    "getAaveLendingPool()": FunctionFragment;
    "getTraderMarginInYieldBearingTokensTest(address)": FunctionFragment;
    "getUnderlyingYieldBearingToken()": FunctionFragment;
    "getVAMMAddress()": FunctionFragment;
    "initialize(address,address)": FunctionFragment;
    "initiateFullyCollateralisedFixedTakerSwap(uint256,uint160)": FunctionFragment;
    "marginEngine()": FunctionFragment;
    "owner()": FunctionFragment;
    "paused()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "settleTrader()": FunctionFragment;
    "traders(address)": FunctionFragment;
    "transferMarginToMarginEngineTrader(address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unwindFullyCollateralisedFixedTakerSwap(uint256,uint160)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getAaveLendingPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTraderMarginInYieldBearingTokensTest",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUnderlyingYieldBearingToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVAMMAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initiateFullyCollateralisedFixedTakerSwap",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "marginEngine",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "settleTrader",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "traders", values: [string]): string;
  encodeFunctionData(
    functionFragment: "transferMarginToMarginEngineTrader",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unwindFullyCollateralisedFixedTakerSwap",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "getAaveLendingPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTraderMarginInYieldBearingTokensTest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnderlyingYieldBearingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVAMMAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initiateFullyCollateralisedFixedTakerSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marginEngine",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settleTrader",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "traders", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferMarginToMarginEngineTrader",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unwindFullyCollateralisedFixedTakerSwap",
    data: BytesLike
  ): Result;

  events: {
    "InitiateFullyCollateralisedSwap(uint256,int256,int256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "InitiateFullyCollateralisedSwap"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export type InitiateFullyCollateralisedSwapEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber] & {
    marginInScaledYieldBearingTokens: BigNumber;
    fixedTokenBalance: BigNumber;
    variableTokenBalance: BigNumber;
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type PausedEvent = TypedEvent<[string] & { account: string }>;

export type UnpausedEvent = TypedEvent<[string] & { account: string }>;

export class TestAaveFCM extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TestAaveFCMInterface;

  functions: {
    getAaveLendingPool(overrides?: CallOverrides): Promise<[string]>;

    getTraderMarginInYieldBearingTokensTest(
      traderAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { marginInYieldBearingTokens: BigNumber }>;

    getUnderlyingYieldBearingToken(
      overrides?: CallOverrides
    ): Promise<[string]>;

    getVAMMAddress(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      _vammAddress: string,
      _marginEngineAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initiateFullyCollateralisedFixedTakerSwap(
      notional: BigNumberish,
      sqrtPriceLimitX96: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    marginEngine(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    settleTrader(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    traders(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, boolean] & {
        marginInScaledYieldBearingTokens: BigNumber;
        fixedTokenBalance: BigNumber;
        variableTokenBalance: BigNumber;
        isSettled: boolean;
      }
    >;

    transferMarginToMarginEngineTrader(
      _account: string,
      marginDeltaInUnderlyingTokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unwindFullyCollateralisedFixedTakerSwap(
      notionalToUnwind: BigNumberish,
      sqrtPriceLimitX96: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  getAaveLendingPool(overrides?: CallOverrides): Promise<string>;

  getTraderMarginInYieldBearingTokensTest(
    traderAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUnderlyingYieldBearingToken(overrides?: CallOverrides): Promise<string>;

  getVAMMAddress(overrides?: CallOverrides): Promise<string>;

  initialize(
    _vammAddress: string,
    _marginEngineAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initiateFullyCollateralisedFixedTakerSwap(
    notional: BigNumberish,
    sqrtPriceLimitX96: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  marginEngine(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  settleTrader(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  traders(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, boolean] & {
      marginInScaledYieldBearingTokens: BigNumber;
      fixedTokenBalance: BigNumber;
      variableTokenBalance: BigNumber;
      isSettled: boolean;
    }
  >;

  transferMarginToMarginEngineTrader(
    _account: string,
    marginDeltaInUnderlyingTokens: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unwindFullyCollateralisedFixedTakerSwap(
    notionalToUnwind: BigNumberish,
    sqrtPriceLimitX96: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getAaveLendingPool(overrides?: CallOverrides): Promise<string>;

    getTraderMarginInYieldBearingTokensTest(
      traderAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUnderlyingYieldBearingToken(overrides?: CallOverrides): Promise<string>;

    getVAMMAddress(overrides?: CallOverrides): Promise<string>;

    initialize(
      _vammAddress: string,
      _marginEngineAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    initiateFullyCollateralisedFixedTakerSwap(
      notional: BigNumberish,
      sqrtPriceLimitX96: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    marginEngine(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    settleTrader(overrides?: CallOverrides): Promise<void>;

    traders(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, boolean] & {
        marginInScaledYieldBearingTokens: BigNumber;
        fixedTokenBalance: BigNumber;
        variableTokenBalance: BigNumber;
        isSettled: boolean;
      }
    >;

    transferMarginToMarginEngineTrader(
      _account: string,
      marginDeltaInUnderlyingTokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unwindFullyCollateralisedFixedTakerSwap(
      notionalToUnwind: BigNumberish,
      sqrtPriceLimitX96: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "InitiateFullyCollateralisedSwap(uint256,int256,int256)"(
      marginInScaledYieldBearingTokens?: null,
      fixedTokenBalance?: null,
      variableTokenBalance?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      {
        marginInScaledYieldBearingTokens: BigNumber;
        fixedTokenBalance: BigNumber;
        variableTokenBalance: BigNumber;
      }
    >;

    InitiateFullyCollateralisedSwap(
      marginInScaledYieldBearingTokens?: null,
      fixedTokenBalance?: null,
      variableTokenBalance?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      {
        marginInScaledYieldBearingTokens: BigNumber;
        fixedTokenBalance: BigNumber;
        variableTokenBalance: BigNumber;
      }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "Paused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Paused(account?: null): TypedEventFilter<[string], { account: string }>;

    "Unpaused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Unpaused(account?: null): TypedEventFilter<[string], { account: string }>;
  };

  estimateGas: {
    getAaveLendingPool(overrides?: CallOverrides): Promise<BigNumber>;

    getTraderMarginInYieldBearingTokensTest(
      traderAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUnderlyingYieldBearingToken(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVAMMAddress(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _vammAddress: string,
      _marginEngineAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initiateFullyCollateralisedFixedTakerSwap(
      notional: BigNumberish,
      sqrtPriceLimitX96: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    marginEngine(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    settleTrader(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    traders(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    transferMarginToMarginEngineTrader(
      _account: string,
      marginDeltaInUnderlyingTokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unwindFullyCollateralisedFixedTakerSwap(
      notionalToUnwind: BigNumberish,
      sqrtPriceLimitX96: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getAaveLendingPool(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTraderMarginInYieldBearingTokensTest(
      traderAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUnderlyingYieldBearingToken(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVAMMAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _vammAddress: string,
      _marginEngineAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initiateFullyCollateralisedFixedTakerSwap(
      notional: BigNumberish,
      sqrtPriceLimitX96: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    marginEngine(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    settleTrader(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    traders(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferMarginToMarginEngineTrader(
      _account: string,
      marginDeltaInUnderlyingTokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unwindFullyCollateralisedFixedTakerSwap(
      notionalToUnwind: BigNumberish,
      sqrtPriceLimitX96: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
