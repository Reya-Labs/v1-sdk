/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  LiquidityMathTest,
  LiquidityMathTestInterface,
} from "../LiquidityMathTest";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint128",
        name: "x",
        type: "uint128",
      },
      {
        internalType: "int128",
        name: "y",
        type: "int128",
      },
    ],
    name: "addDelta",
    outputs: [
      {
        internalType: "uint128",
        name: "z",
        type: "uint128",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "x",
        type: "uint128",
      },
      {
        internalType: "int128",
        name: "y",
        type: "int128",
      },
    ],
    name: "getGasCostOfAddDelta",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506102af806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063402d44fb1461003b578063cf41632f1461006b575b600080fd5b61004e61004936600461018a565b61008c565b6040516001600160801b0390911681526020015b60405180910390f35b61007e61007936600461018a565b6100a1565b604051908152602001610062565b600061009883836100c5565b90505b92915050565b6000805a90506100b184846100c5565b505a6100bd9082610226565b949350505050565b60008082600f0b1215610137576001600160801b0383166100e58361023d565b6100ef90856101fe565b9150816001600160801b0316106101325760405162461bcd60e51b81526020600482015260026024820152614c5360f01b60448201526064015b60405180910390fd5b61009b565b6001600160801b03831661014b83856101d3565b9150816001600160801b0316101561009b5760405162461bcd60e51b81526020600482015260026024820152614c4160f01b6044820152606401610129565b6000806040838503121561019c578182fd5b82356001600160801b03811681146101b2578283fd5b91506020830135600f81900b81146101c8578182fd5b809150509250929050565b60006001600160801b038281168482168083038211156101f5576101f5610263565b01949350505050565b60006001600160801b038381169083168181101561021e5761021e610263565b039392505050565b60008282101561023857610238610263565b500390565b6000600f82900b60016001607f1b031981141561025c5761025c610263565b9003919050565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220f0622df3e610e72cfc749fb98dcf3f3b92411a6538ae27193c4fc3c77dc74e9c64736f6c63430008040033";

export class LiquidityMathTest__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<LiquidityMathTest> {
    return super.deploy(overrides || {}) as Promise<LiquidityMathTest>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): LiquidityMathTest {
    return super.attach(address) as LiquidityMathTest;
  }
  connect(signer: Signer): LiquidityMathTest__factory {
    return super.connect(signer) as LiquidityMathTest__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LiquidityMathTestInterface {
    return new utils.Interface(_abi) as LiquidityMathTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): LiquidityMathTest {
    return new Contract(address, _abi, signerOrProvider) as LiquidityMathTest;
  }
}
