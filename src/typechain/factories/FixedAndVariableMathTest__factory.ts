/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  FixedAndVariableMathTest,
  FixedAndVariableMathTestInterface,
} from "../FixedAndVariableMathTest";

const _abi = [
  {
    inputs: [],
    name: "PRBMathSD59x18__DivInputTooSmall",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "rAbs",
        type: "uint256",
      },
    ],
    name: "PRBMathSD59x18__DivOverflow",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "x",
        type: "int256",
      },
    ],
    name: "PRBMathSD59x18__FromIntOverflow",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "x",
        type: "int256",
      },
    ],
    name: "PRBMathSD59x18__FromIntUnderflow",
    type: "error",
  },
  {
    inputs: [],
    name: "PRBMathSD59x18__MulInputTooSmall",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "rAbs",
        type: "uint256",
      },
    ],
    name: "PRBMathSD59x18__MulOverflow",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "x",
        type: "uint256",
      },
    ],
    name: "PRBMathUD60x18__FromUintOverflow",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "prod1",
        type: "uint256",
      },
    ],
    name: "PRBMath__MulDivFixedPointOverflow",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "prod1",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "denominator",
        type: "uint256",
      },
    ],
    name: "PRBMath__MulDivOverflow",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "timeInSeconds",
        type: "uint256",
      },
    ],
    name: "accrualFact",
    outputs: [
      {
        internalType: "uint256",
        name: "timeInYears",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "amount0",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "excessBalance",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "termStartTimestamp",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "termEndTimestamp",
        type: "uint256",
      },
    ],
    name: "calculateFixedTokenBalance",
    outputs: [
      {
        internalType: "int256",
        name: "fixedTokenBalance",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "fixedTokenBalance",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "variableTokenBalance",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "termStartTimestamp",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "termEndTimestamp",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "variableFactorToMaturity",
        type: "uint256",
      },
    ],
    name: "calculateSettlementCashflow",
    outputs: [
      {
        internalType: "int256",
        name: "cashflow",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "atMaturity",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "termStartTimestamp",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "termEndTimestamp",
        type: "uint256",
      },
    ],
    name: "fixedFactorTest",
    outputs: [
      {
        internalType: "uint256",
        name: "fixedFactorValue",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "amount0",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "amount1",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "accruedVariableFactor",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "termStartTimestamp",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "termEndTimestamp",
        type: "uint256",
      },
    ],
    name: "getExcessBalance",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "amount0",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "amount1",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "accruedVariableFactor",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "termStartTimestamp",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "termEndTimestamp",
        type: "uint256",
      },
    ],
    name: "getFixedTokenBalance",
    outputs: [
      {
        internalType: "int256",
        name: "fixedTokenBalance",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506109f2806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c8063183e90d01461006757806319e685a51461008c5780631baadedd1461009f5780634f97eee9146100b2578063b0bb9487146100c5578063e859f86a146100d8575b600080fd5b61007a610075366004610885565b6100eb565b60405190815260200160405180910390f35b61007a61009a366004610885565b610106565b61007a6100ad366004610885565b610115565b61007a6100c0366004610854565b610124565b61007a6100d336600461081c565b610132565b61007a6100e63660046108bf565b610149565b60006100fa868686868661015a565b90505b95945050505050565b60006100fa86868686866101ef565b60006100fa8686868686610257565b60006100fd858585856102bf565b600061013f848484610322565b90505b9392505050565b6000610154826103ed565b92915050565b600085158015610168575084155b15610175575060006100fd565b600061018087610404565b9050600061018d87610404565b90508484116101b75760405162461bcd60e51b81526004016101ae906108d7565b60405180910390fd5b60006101c68383898989610257565b905060006101d6848389896102bf565b670de0b6b3a764000090059a9950505050505050505050565b6000806101fb87610404565b9050600061020887610404565b905060006102218361021c60018a8a610322565b61048f565b9050600061022f838761048f565b9050600061023d82846108f5565b670de0b6b3a764000090059b9a5050505050505050505050565b600061027d60405180606001604052806000815260200160008152602001600081525090565b61028d8761021c60008787610322565b8152610299868661048f565b6020820181905281516102ac91906108f5565b6040909101819052905095945050505050565b60008282116102e05760405162461bcd60e51b81526004016101ae906108d7565b60006102f28661021c60018787610322565b905060006103008683610936565b90506103178161031260018888610322565b610554565b979650505050505050565b60008282116103435760405162461bcd60e51b81526004016101ae906108d7565b8261034c61061a565b10156103825760405162461bcd60e51b8152602060048201526005602482015264422e543c5360d81b60448201526064016101ae565b6000848061039757508261039461061a565b10155b156103ad576103a68484610975565b90506103c3565b836103b661061a565b6103c09190610975565b90505b60006103ce826103ed565b90506103e38168056bc75e2d6310000061062a565b9695505050505050565b6000610154826a1a1601fc4ea7109e00000061062a565b60007809392ee8e921d5d073aff322e62439fcf32d7f344649470f8f198212156104445760405163e608e18b60e01b8152600481018390526024016101ae565b7809392ee8e921d5d073aff322e62439fcf32d7f344649470f90821315610481576040516371f72a3160e01b8152600481018390526024016101ae565b50670de0b6b3a76400000290565b6000600160ff1b8314806104a65750600160ff1b82145b156104c457604051630d01a11b60e21b815260040160405180910390fd5b600080600085126104d557846104da565b846000035b9150600084126104ea57836104ef565b836000035b905060006104fd838361063f565b90506001600160ff1b0381111561052a5760405163bf79e8d960e01b8152600481018290526024016101ae565b6000198087139086138082186001146105435782610548565b826000035b98975050505050505050565b6000600160ff1b83148061056b5750600160ff1b82145b156105895760405163b3c754a360e01b815260040160405180910390fd5b6000806000851261059a578461059f565b846000035b9150600084126105af57836105b4565b836000035b905060006105cb83670de0b6b3a764000084610701565b90506001600160ff1b038111156105f857604051637cb4bef560e01b8152600481018290526024016101ae565b6000198087139086138082186001146106115782610548565b6105488361098c565b6000610625426107dd565b905090565b600061014283670de0b6b3a764000084610701565b60008080600019848609848602925082811083820303915050670de0b6b3a764000081106106835760405163698d9a0160e11b8152600481018290526024016101ae565b600080670de0b6b3a76400008688099150506706f05b59d3b1ffff8111826106bd5780670de0b6b3a7640000850401945050505050610154565b620400008285030493909111909103600160ee1b02919091177faccb18165bd6fe31ae1cf318dc5b51eee0e1ba569b88cd74c1773b91fac106690201905092915050565b60008080600019858709858702925082811083820303915050806000141561074a5783828161074057634e487b7160e01b600052601260045260246000fd5b0492505050610142565b83811061077457604051631dcf306360e21b815260048101829052602481018590526044016101ae565b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b60007812725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f2182111561048157604051633492ffd960e01b8152600481018390526024016101ae565b600080600060608486031215610830578283fd5b8335801515811461083f578384fd5b95602085013595506040909401359392505050565b60008060008060808587031215610869578081fd5b5050823594602084013594506040840135936060013592509050565b600080600080600060a0868803121561089c578081fd5b505083359560208501359550604085013594606081013594506080013592509050565b6000602082840312156108d0578081fd5b5035919050565b602080825260049082015263453c3d5360e01b604082015260600190565b600080821280156001600160ff1b0384900385131615610917576109176109a6565b600160ff1b8390038412811615610930576109306109a6565b50500190565b60008083128015600160ff1b850184121615610954576109546109a6565b6001600160ff1b038401831381161561096f5761096f6109a6565b50500390565b600082821015610987576109876109a6565b500390565b6000600160ff1b8214156109a2576109a26109a6565b0390565b634e487b7160e01b600052601160045260246000fdfea26469706673582212206b1fbf4197f9bb5f9afc0558ae0eb64612240eacc74b6a1beee990c4c6519cd864736f6c63430008040033";

export class FixedAndVariableMathTest__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<FixedAndVariableMathTest> {
    return super.deploy(overrides || {}) as Promise<FixedAndVariableMathTest>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): FixedAndVariableMathTest {
    return super.attach(address) as FixedAndVariableMathTest;
  }
  connect(signer: Signer): FixedAndVariableMathTest__factory {
    return super.connect(signer) as FixedAndVariableMathTest__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FixedAndVariableMathTestInterface {
    return new utils.Interface(_abi) as FixedAndVariableMathTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): FixedAndVariableMathTest {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as FixedAndVariableMathTest;
  }
}
