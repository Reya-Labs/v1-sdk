/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  FixedAndVariableMathTest,
  FixedAndVariableMathTestInterface,
} from "../FixedAndVariableMathTest";

const _abi = [
  {
    inputs: [],
    name: "AmountSignsSame",
    type: "error",
  },
  {
    inputs: [],
    name: "PRBMathSD59x18__DivInputTooSmall",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "rAbs",
        type: "uint256",
      },
    ],
    name: "PRBMathSD59x18__DivOverflow",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "x",
        type: "int256",
      },
    ],
    name: "PRBMathSD59x18__FromIntOverflow",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "x",
        type: "int256",
      },
    ],
    name: "PRBMathSD59x18__FromIntUnderflow",
    type: "error",
  },
  {
    inputs: [],
    name: "PRBMathSD59x18__MulInputTooSmall",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "rAbs",
        type: "uint256",
      },
    ],
    name: "PRBMathSD59x18__MulOverflow",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "x",
        type: "uint256",
      },
    ],
    name: "PRBMathUD60x18__FromUintOverflow",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "prod1",
        type: "uint256",
      },
    ],
    name: "PRBMath__MulDivFixedPointOverflow",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "prod1",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "denominator",
        type: "uint256",
      },
    ],
    name: "PRBMath__MulDivOverflow",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "timeInSeconds",
        type: "uint256",
      },
    ],
    name: "accrualFact",
    outputs: [
      {
        internalType: "uint256",
        name: "timeInYears",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "amount0",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "excessBalance",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "termStartTimestamp",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "termEndTimestamp",
        type: "uint256",
      },
    ],
    name: "calculateFixedTokenBalance",
    outputs: [
      {
        internalType: "int256",
        name: "fixedTokenBalance",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "fixedTokenBalance",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "variableTokenBalance",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "termStartTimestamp",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "termEndTimestamp",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "variableFactorToMaturity",
        type: "uint256",
      },
    ],
    name: "calculateSettlementCashflow",
    outputs: [
      {
        internalType: "int256",
        name: "cashflow",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "atMaturity",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "termStartTimestamp",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "termEndTimestamp",
        type: "uint256",
      },
    ],
    name: "fixedFactorTest",
    outputs: [
      {
        internalType: "uint256",
        name: "fixedFactorValue",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "amount0",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "amount1",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "accruedVariableFactor",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "termStartTimestamp",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "termEndTimestamp",
        type: "uint256",
      },
    ],
    name: "getExcessBalance",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "amount0",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "amount1",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "accruedVariableFactor",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "termStartTimestamp",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "termEndTimestamp",
        type: "uint256",
      },
    ],
    name: "getFixedTokenBalance",
    outputs: [
      {
        internalType: "int256",
        name: "fixedTokenBalance",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610a2e806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c8063183e90d01461006757806319e685a51461008c5780631baadedd1461009f5780634f97eee9146100b2578063b0bb9487146100c5578063e859f86a146100d8575b600080fd5b61007a6100753660046108c1565b6100eb565b60405190815260200160405180910390f35b61007a61009a3660046108c1565b610104565b61007a6100ad3660046108c1565b610113565b61007a6100c0366004610890565b610122565b61007a6100d3366004610858565b610139565b61007a6100e63660046108fb565b610150565b60006100fa8686868686610161565b9695505050505050565b60006100fa8686868686610235565b60006100fa868686868661029d565b600061013085858585610305565b95945050505050565b6000610146848484610368565b90505b9392505050565b600061015b82610429565b92915050565b6000808613158015610174575060008512155b8061018c57506000861215801561018c575060008513155b8061019e57508515801561019e575084155b6101bb576040516301161e4160e01b815260040160405180910390fd5b60006101c687610440565b905060006101d387610440565b90508484116101fd5760405162461bcd60e51b81526004016101f490610913565b60405180910390fd5b600061020c838389898961029d565b9050600061021c84838989610305565b670de0b6b3a764000090059a9950505050505050505050565b60008061024187610440565b9050600061024e87610440565b905060006102678361026260018a8a610368565b6104cb565b9050600061027583876104cb565b905060006102838284610931565b670de0b6b3a764000090059b9a5050505050505050505050565b60006102c360405180606001604052806000815260200160008152602001600081525090565b6102d38761026260008787610368565b81526102df86866104cb565b6020820181905281516102f29190610931565b6040909101819052905095945050505050565b60008282116103265760405162461bcd60e51b81526004016101f490610913565b60006103388661026260018787610368565b905060006103468683610972565b905061035d8161035860018888610368565b610590565b979650505050505050565b60008282116103895760405162461bcd60e51b81526004016101f490610913565b82610392610656565b10156103c85760405162461bcd60e51b8152602060048201526005602482015264422e543c5360d81b60448201526064016101f4565b600084806103dd5750826103da610656565b10155b156103f3576103ec84846109b1565b9050610409565b836103fc610656565b61040691906109b1565b90505b600061041482610429565b90506100fa8168056bc75e2d63100000610666565b600061015b826a1a1601fc4ea7109e000000610666565b60007809392ee8e921d5d073aff322e62439fcf32d7f344649470f8f198212156104805760405163e608e18b60e01b8152600481018390526024016101f4565b7809392ee8e921d5d073aff322e62439fcf32d7f344649470f908213156104bd576040516371f72a3160e01b8152600481018390526024016101f4565b50670de0b6b3a76400000290565b6000600160ff1b8314806104e25750600160ff1b82145b1561050057604051630d01a11b60e21b815260040160405180910390fd5b600080600085126105115784610516565b846000035b915060008412610526578361052b565b836000035b90506000610539838361067b565b90506001600160ff1b038111156105665760405163bf79e8d960e01b8152600481018290526024016101f4565b60001980871390861380821860011461057f5782610584565b826000035b98975050505050505050565b6000600160ff1b8314806105a75750600160ff1b82145b156105c55760405163b3c754a360e01b815260040160405180910390fd5b600080600085126105d657846105db565b846000035b9150600084126105eb57836105f0565b836000035b9050600061060783670de0b6b3a76400008461073d565b90506001600160ff1b0381111561063457604051637cb4bef560e01b8152600481018290526024016101f4565b60001980871390861380821860011461064d5782610584565b610584836109c8565b600061066142610819565b905090565b600061014983670de0b6b3a76400008461073d565b60008080600019848609848602925082811083820303915050670de0b6b3a764000081106106bf5760405163698d9a0160e11b8152600481018290526024016101f4565b600080670de0b6b3a76400008688099150506706f05b59d3b1ffff8111826106f95780670de0b6b3a764000085040194505050505061015b565b620400008285030493909111909103600160ee1b02919091177faccb18165bd6fe31ae1cf318dc5b51eee0e1ba569b88cd74c1773b91fac106690201905092915050565b6000808060001985870985870292508281108382030391505080600014156107865783828161077c57634e487b7160e01b600052601260045260246000fd5b0492505050610149565b8381106107b057604051631dcf306360e21b815260048101829052602481018590526044016101f4565b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b60007812725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f218211156104bd57604051633492ffd960e01b8152600481018390526024016101f4565b60008060006060848603121561086c578283fd5b8335801515811461087b578384fd5b95602085013595506040909401359392505050565b600080600080608085870312156108a5578081fd5b5050823594602084013594506040840135936060013592509050565b600080600080600060a086880312156108d8578081fd5b505083359560208501359550604085013594606081013594506080013592509050565b60006020828403121561090c578081fd5b5035919050565b602080825260049082015263453c3d5360e01b604082015260600190565b600080821280156001600160ff1b0384900385131615610953576109536109e2565b600160ff1b839003841281161561096c5761096c6109e2565b50500190565b60008083128015600160ff1b850184121615610990576109906109e2565b6001600160ff1b03840183138116156109ab576109ab6109e2565b50500390565b6000828210156109c3576109c36109e2565b500390565b6000600160ff1b8214156109de576109de6109e2565b0390565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220ea5d737ac43d82a5347d07c2f79145dffa747bca9f91aa190137bee25b0e3a5064736f6c63430008040033";

export class FixedAndVariableMathTest__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<FixedAndVariableMathTest> {
    return super.deploy(overrides || {}) as Promise<FixedAndVariableMathTest>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): FixedAndVariableMathTest {
    return super.attach(address) as FixedAndVariableMathTest;
  }
  connect(signer: Signer): FixedAndVariableMathTest__factory {
    return super.connect(signer) as FixedAndVariableMathTest__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FixedAndVariableMathTestInterface {
    return new utils.Interface(_abi) as FixedAndVariableMathTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): FixedAndVariableMathTest {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as FixedAndVariableMathTest;
  }
}
