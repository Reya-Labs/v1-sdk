/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Actor, ActorInterface } from "../Actor";

const _abi = [
  {
    inputs: [],
    name: "AavePoolGetReserveNormalizedIncomeReturnedZero",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "unlocked",
        type: "bool",
      },
    ],
    name: "CanOnlyTradeIfUnlocked",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "marginRequirement",
        type: "uint256",
      },
    ],
    name: "CannotLiquidate",
    type: "error",
  },
  {
    inputs: [],
    name: "CannotSettleBeforeMaturity",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "x",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "y",
        type: "uint256",
      },
    ],
    name: "DebugError",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "amount0",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "amount1",
        type: "int256",
      },
    ],
    name: "ExpectedOppositeSigns",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint160",
        name: "sqrtPriceX96",
        type: "uint160",
      },
    ],
    name: "ExpectedSqrtPriceZeroBeforeInit",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "amountSpecified",
        type: "int256",
      },
    ],
    name: "IRSNotionalAmountSpecifiedMustBeNonZero",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidMarginDelta",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "amount",
        type: "uint128",
      },
    ],
    name: "LiquidityDeltaMustBePositiveInBurn",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "amount",
        type: "uint128",
      },
    ],
    name: "LiquidityDeltaMustBePositiveInMint",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "marginRequirement",
        type: "int256",
      },
    ],
    name: "MarginLessThanMinimum",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "marginRequirement",
        type: "int256",
      },
      {
        internalType: "int24",
        name: "tick",
        type: "int24",
      },
      {
        internalType: "int256",
        name: "fixedTokenDelta",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "variableTokenDelta",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "cumulativeFeeIncurred",
        type: "uint256",
      },
      {
        internalType: "int256",
        name: "fixedTokenDeltaUnbalanced",
        type: "int256",
      },
    ],
    name: "MarginRequirementNotMet",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "marginRequirement",
        type: "int256",
      },
    ],
    name: "MarginRequirementNotMetFCM",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "requested",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "available",
        type: "uint256",
      },
    ],
    name: "NotEnoughFunds",
    type: "error",
  },
  {
    inputs: [],
    name: "OnlyFCM",
    type: "error",
  },
  {
    inputs: [],
    name: "OnlyMarginEngine",
    type: "error",
  },
  {
    inputs: [],
    name: "OnlyOwnerCanUpdatePosition",
    type: "error",
  },
  {
    inputs: [],
    name: "OnlyVAMM",
    type: "error",
  },
  {
    inputs: [],
    name: "PositionNetZero",
    type: "error",
  },
  {
    inputs: [],
    name: "PositionNotSettled",
    type: "error",
  },
  {
    inputs: [],
    name: "WithdrawalExceedsCurrentMargin",
    type: "error",
  },
  {
    inputs: [],
    name: "closeToOrBeyondMaturity",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "VAMMAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "int24",
        name: "tickLower",
        type: "int24",
      },
      {
        internalType: "int24",
        name: "tickUpper",
        type: "int24",
      },
      {
        internalType: "uint128",
        name: "amount",
        type: "uint128",
      },
    ],
    name: "burn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "FCMAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "notional",
        type: "uint256",
      },
      {
        internalType: "uint160",
        name: "sqrtPriceLimitX96",
        type: "uint160",
      },
    ],
    name: "initiateFullyCollateralisedFixedTakerSwap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "MEAddress",
        type: "address",
      },
      {
        internalType: "int24",
        name: "tickLower",
        type: "int24",
      },
      {
        internalType: "int24",
        name: "tickUpper",
        type: "int24",
      },
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "liquidatePosition",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "VAMMAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "int24",
        name: "tickLower",
        type: "int24",
      },
      {
        internalType: "int24",
        name: "tickUpper",
        type: "int24",
      },
      {
        internalType: "uint128",
        name: "amount",
        type: "uint128",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "peripheryAddress",
        type: "address",
      },
      {
        components: [
          {
            internalType: "contract IMarginEngine",
            name: "marginEngine",
            type: "address",
          },
          {
            internalType: "int24",
            name: "tickLower",
            type: "int24",
          },
          {
            internalType: "int24",
            name: "tickUpper",
            type: "int24",
          },
          {
            internalType: "uint256",
            name: "notional",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "isMint",
            type: "bool",
          },
        ],
        internalType: "struct IPeriphery.MintOrBurnParams",
        name: "params",
        type: "tuple",
      },
    ],
    name: "mintOrBurnViaPeriphery",
    outputs: [
      {
        internalType: "int256",
        name: "positionMarginRequirement",
        type: "int256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "MEAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "intAddress",
        type: "address",
      },
      {
        internalType: "bool",
        name: "allowIntegration",
        type: "bool",
      },
    ],
    name: "setIntegrationApproval",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "FCMAddress",
        type: "address",
      },
    ],
    name: "settleYBATrader",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "VAMMAddress",
        type: "address",
      },
      {
        components: [
          {
            internalType: "address",
            name: "recipient",
            type: "address",
          },
          {
            internalType: "int256",
            name: "amountSpecified",
            type: "int256",
          },
          {
            internalType: "uint160",
            name: "sqrtPriceLimitX96",
            type: "uint160",
          },
          {
            internalType: "int24",
            name: "tickLower",
            type: "int24",
          },
          {
            internalType: "int24",
            name: "tickUpper",
            type: "int24",
          },
        ],
        internalType: "struct IVAMM.SwapParams",
        name: "params",
        type: "tuple",
      },
    ],
    name: "swap",
    outputs: [
      {
        internalType: "int256",
        name: "_fixedTokenDelta",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "_variableTokenDelta",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "_cumulativeFeeIncurred",
        type: "uint256",
      },
      {
        internalType: "int256",
        name: "_fixedTokenDeltaUnbalanced",
        type: "int256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "peripheryAddress",
        type: "address",
      },
      {
        components: [
          {
            internalType: "contract IMarginEngine",
            name: "marginEngine",
            type: "address",
          },
          {
            internalType: "bool",
            name: "isFT",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "notional",
            type: "uint256",
          },
          {
            internalType: "uint160",
            name: "sqrtPriceLimitX96",
            type: "uint160",
          },
          {
            internalType: "int24",
            name: "tickLower",
            type: "int24",
          },
          {
            internalType: "int24",
            name: "tickUpper",
            type: "int24",
          },
        ],
        internalType: "struct IPeriphery.SwapPeripheryParams",
        name: "params",
        type: "tuple",
      },
    ],
    name: "swapViaPeriphery",
    outputs: [
      {
        internalType: "int256",
        name: "_fixedTokenDelta",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "_variableTokenDelta",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "_cumulativeFeeIncurred",
        type: "uint256",
      },
      {
        internalType: "int256",
        name: "_fixedTokenDeltaUnbalanced",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "_marginRequirement",
        type: "int256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "FCMAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "notionalToUnwind",
        type: "uint256",
      },
      {
        internalType: "uint160",
        name: "sqrtPriceLimitX96",
        type: "uint160",
      },
    ],
    name: "unwindFullyCollateralisedFixedTakerSwap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "MEAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "_owner",
        type: "address",
      },
      {
        internalType: "int24",
        name: "tickLower",
        type: "int24",
      },
      {
        internalType: "int24",
        name: "tickUpper",
        type: "int24",
      },
      {
        internalType: "int256",
        name: "marginDelta",
        type: "int256",
      },
    ],
    name: "updatePositionMargin",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610d51806100206000396000f3fe608060405234801561001057600080fd5b50600436106100995760003560e01c80631f2405b11461009e57806340283698146100b357806369696dbf146100c65780637b4f5327146100d9578063840047eb146100ec578063cacdd723146100ff578063cc981dda14610112578063cf0aabe31461014a578063d1afdbf61461015d578063e9ae4bc814610198578063f5594a2f146101ab575b600080fd5b6100b16100ac36600461088f565b6101cc565b005b6100b16100c13660046107e6565b610258565b6100b16100d4366004610b3c565b610338565b6100b16100e736600461088f565b61039d565b6100b16100fa3660046107ca565b6103cf565b6100b161010d36600461090a565b610425565b6101256101203660046109fb565b6104b2565b6040805194855260208501939093529183015260608201526080015b60405180910390f35b6100b161015836600461082c565b61057b565b61017061016b366004610a93565b6105f6565b604080519586526020860194909452928401919091526060830152608082015260a001610141565b6100b16101a6366004610b3c565b6106cf565b6101be6101b9366004610965565b6106fc565b604051908152602001610141565b604051631f2f089360e01b81526001600160a01b03861690631f2f0893906101fe908790879087908790600401610c44565b602060405180830381600087803b15801561021857600080fd5b505af115801561022c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102509190610b99565b505050505050565b6000836001600160a01b031663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b15801561029357600080fd5b505afa1580156102a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102cb9190610b7d565b604051630db9b71760e41b81526001600160a01b03858116600483015284151560248301529192509082169063db9b717090604401600060405180830381600087803b15801561031a57600080fd5b505af115801561032e573d6000803e3d6000fd5b5050505050505050565b6040516355468a8b60e01b81526001600160a01b038416906355468a8b906103669085908590600401610c77565b600060405180830381600087803b15801561038057600080fd5b505af1158015610394573d6000803e3d6000fd5b50505050505050565b604051635c6651a760e11b81526001600160a01b0386169063b8cca34e906101fe908790879087908790600401610c44565b806001600160a01b031663ebc9b02e6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561040a57600080fd5b505af115801561041e573d6000803e3d6000fd5b5050505050565b604051630b2b281f60e11b81526001600160a01b038281166004830152600285810b602484015284900b6044830152851690631656503e90606401602060405180830381600087803b15801561047a57600080fd5b505af115801561048e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061041e9190610b99565b604080516333bac73760e11b815282516001600160a01b0390811660048301526020840151602483015291830151821660448201526060830151600290810b60648301526080840151900b6084820152600091829182918291908716906367758e6e9060a40160a060405180830381600087803b15801561053257600080fd5b505af1158015610546573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056a9190610bb1565b509299919850965090945092505050565b604051637717797f60e01b81526001600160a01b038581166004830152600285810b602484015284900b604483015260648201839052861690637717797f90608401600060405180830381600087803b1580156105d757600080fd5b505af11580156105eb573d6000803e3d6000fd5b505050505050505050565b60408051631feb314d60e21b815282516001600160a01b0390811660048301526020840151151560248301529183015160448201526060830151821660648201526080830151600290810b608483015260a0840151900b60a48201526000918291829182918291881690637facc5349060c40160c060405180830381600087803b15801561068357600080fd5b505af1158015610697573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106bb9190610bf0565b50939b929a50909850965090945092505050565b60405162dd089d60e21b81526001600160a01b038416906303742274906103669085908590600401610c77565b60408051639afb787360e01b815282516001600160a01b0390811660048301526020840151600290810b60248401529284015190920b604482015260608301516064820152608083015115156084820152600091841690639afb78739060a401602060405180830381600087803b15801561077657600080fd5b505af115801561078a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ae9190610b99565b9392505050565b803580151581146107c557600080fd5b919050565b6000602082840312156107db578081fd5b81356107ae81610cf4565b6000806000606084860312156107fa578182fd5b833561080581610cf4565b9250602084013561081581610cf4565b9150610823604085016107b5565b90509250925092565b600080600080600060a08688031215610843578081fd5b853561084e81610cf4565b9450602086013561085e81610cf4565b9350604086013561086e81610d0c565b9250606086013561087e81610d0c565b949793965091946080013592915050565b600080600080600060a086880312156108a6578081fd5b85356108b181610cf4565b945060208601356108c181610cf4565b935060408601356108d181610d0c565b925060608601356108e181610d0c565b915060808601356001600160801b03811681146108fc578182fd5b809150509295509295909350565b6000806000806080858703121561091f578384fd5b843561092a81610cf4565b9350602085013561093a81610d0c565b9250604085013561094a81610d0c565b9150606085013561095a81610cf4565b939692955090935050565b60008082840360c0811215610978578283fd5b833561098381610cf4565b925060a0601f1982011215610996578182fd5b5061099f610c8e565b60208401356109ad81610cf4565b815260408401356109bd81610d0c565b602082015260608401356109d081610d0c565b6040820152608084013560608201526109eb60a085016107b5565b6080820152809150509250929050565b60008082840360c0811215610a0e578283fd5b8335610a1981610cf4565b925060a0601f1982011215610a2c578182fd5b50610a35610c8e565b6020840135610a4381610cf4565b8152604084013560208201526060840135610a5d81610cf4565b60408201526080840135610a7081610d0c565b606082015260a0840135610a8381610d0c565b6080820152919491935090915050565b60008082840360e0811215610aa6578283fd5b8335610ab181610cf4565b925060c0601f1982011215610ac4578182fd5b50610acd610cc4565b6020840135610adb81610cf4565b8152610ae9604085016107b5565b6020820152606084013560408201526080840135610b0681610cf4565b606082015260a0840135610b1981610d0c565b608082015260c0840135610b2c81610d0c565b60a0820152919491935090915050565b600080600060608486031215610b50578081fd5b8335610b5b81610cf4565b9250602084013591506040840135610b7281610cf4565b809150509250925092565b600060208284031215610b8e578081fd5b81516107ae81610cf4565b600060208284031215610baa578081fd5b5051919050565b600080600080600060a08688031215610bc8578283fd5b5050835160208501516040860151606087015160809097015192989197509594509092509050565b60008060008060008060c08789031215610c08578384fd5b865195506020870151945060408701519350606087015192506080870151915060a0870151610c3681610d0c565b809150509295509295509295565b6001600160a01b03949094168452600292830b6020850152910b60408301526001600160801b0316606082015260800190565b9182526001600160a01b0316602082015260400190565b60405160a081016001600160401b0381118282101715610cbe57634e487b7160e01b600052604160045260246000fd5b60405290565b60405160c081016001600160401b0381118282101715610cbe57634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610d0957600080fd5b50565b8060020b8114610d0957600080fdfea2646970667358221220ef1f4b86c29beba247ed48901245e3d7e3279749bb5eb5ace2ada69364ddaf7564736f6c63430008040033";

export class Actor__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Actor> {
    return super.deploy(overrides || {}) as Promise<Actor>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Actor {
    return super.attach(address) as Actor;
  }
  connect(signer: Signer): Actor__factory {
    return super.connect(signer) as Actor__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ActorInterface {
    return new utils.Interface(_abi) as ActorInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Actor {
    return new Contract(address, _abi, signerOrProvider) as Actor;
  }
}
