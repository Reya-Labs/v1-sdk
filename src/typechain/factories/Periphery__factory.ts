/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Periphery, PeripheryInterface } from "../Periphery";

const _abi = [
  {
    inputs: [],
    name: "AavePoolGetReserveNormalizedIncomeReturnedZero",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "unlocked",
        type: "bool",
      },
    ],
    name: "CanOnlyTradeIfUnlocked",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "marginRequirement",
        type: "uint256",
      },
    ],
    name: "CannotLiquidate",
    type: "error",
  },
  {
    inputs: [],
    name: "CannotSettleBeforeMaturity",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint160",
        name: "sqrtPriceX96",
        type: "uint160",
      },
    ],
    name: "ExpectedSqrtPriceZeroBeforeInit",
    type: "error",
  },
  {
    inputs: [],
    name: "IRSNotionalAmountSpecifiedMustBeNonZero",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidMarginDelta",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "amount",
        type: "uint128",
      },
    ],
    name: "LiquidityDeltaMustBePositiveInBurn",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "amount",
        type: "uint128",
      },
    ],
    name: "LiquidityDeltaMustBePositiveInMint",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "marginRequirement",
        type: "int256",
      },
    ],
    name: "MarginLessThanMinimum",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "marginRequirement",
        type: "int256",
      },
      {
        internalType: "int24",
        name: "tick",
        type: "int24",
      },
      {
        internalType: "int256",
        name: "fixedTokenDelta",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "variableTokenDelta",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "cumulativeFeeIncurred",
        type: "uint256",
      },
      {
        internalType: "int256",
        name: "fixedTokenDeltaUnbalanced",
        type: "int256",
      },
    ],
    name: "MarginRequirementNotMet",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "marginRequirement",
        type: "int256",
      },
    ],
    name: "MarginRequirementNotMetFCM",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "requested",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "available",
        type: "uint256",
      },
    ],
    name: "NotEnoughFunds",
    type: "error",
  },
  {
    inputs: [],
    name: "OOO",
    type: "error",
  },
  {
    inputs: [],
    name: "OnlyFCM",
    type: "error",
  },
  {
    inputs: [],
    name: "OnlyMarginEngine",
    type: "error",
  },
  {
    inputs: [],
    name: "OnlyOwnerCanUpdatePosition",
    type: "error",
  },
  {
    inputs: [],
    name: "OnlyVAMM",
    type: "error",
  },
  {
    inputs: [],
    name: "PositionNotSettled",
    type: "error",
  },
  {
    inputs: [],
    name: "WithdrawalExceedsCurrentMargin",
    type: "error",
  },
  {
    inputs: [],
    name: "closeToOrBeyondMaturity",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "contract IMarginEngine",
        name: "marginEngine",
        type: "address",
      },
    ],
    name: "getCurrentTick",
    outputs: [
      {
        internalType: "int24",
        name: "currentTick",
        type: "int24",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract IMarginEngine",
            name: "marginEngine",
            type: "address",
          },
          {
            internalType: "int24",
            name: "tickLower",
            type: "int24",
          },
          {
            internalType: "int24",
            name: "tickUpper",
            type: "int24",
          },
          {
            internalType: "uint256",
            name: "notional",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "isMint",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "marginDelta",
            type: "uint256",
          },
        ],
        internalType: "struct IPeriphery.MintOrBurnParams",
        name: "params",
        type: "tuple",
      },
    ],
    name: "mintOrBurn",
    outputs: [
      {
        internalType: "int256",
        name: "positionMarginRequirement",
        type: "int256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract IMarginEngine",
            name: "marginEngine",
            type: "address",
          },
          {
            internalType: "bool",
            name: "isFT",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "notional",
            type: "uint256",
          },
          {
            internalType: "uint160",
            name: "sqrtPriceLimitX96",
            type: "uint160",
          },
          {
            internalType: "int24",
            name: "tickLower",
            type: "int24",
          },
          {
            internalType: "int24",
            name: "tickUpper",
            type: "int24",
          },
          {
            internalType: "uint256",
            name: "marginDelta",
            type: "uint256",
          },
        ],
        internalType: "struct IPeriphery.SwapPeripheryParams",
        name: "params",
        type: "tuple",
      },
    ],
    name: "swap",
    outputs: [
      {
        internalType: "int256",
        name: "_fixedTokenDelta",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "_variableTokenDelta",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "_cumulativeFeeIncurred",
        type: "uint256",
      },
      {
        internalType: "int256",
        name: "_fixedTokenDeltaUnbalanced",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "_marginRequirement",
        type: "int256",
      },
      {
        internalType: "int24",
        name: "_tickAfter",
        type: "int24",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061180c806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063040a5dc11461004657806314d2348e1461007157806334907e3414610092575b600080fd5b610059610054366004611324565b6100d5565b60405160029190910b81526020015b60405180910390f35b61008461007f3660046113b3565b6101c7565b604051908152602001610068565b6100a56100a0366004611458565b610506565b604080519687526020870195909552938501929092526060840152608083015260020b60a082015260c001610068565b600080826001600160a01b031663e098372c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561011157600080fd5b505afa158015610125573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101499190611308565b9050806001600160a01b03166380a0f76c6040518163ffffffff1660e01b815260040160606040518083038186803b15801561018457600080fd5b505afa158015610198573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101bc919061150d565b602001519392505050565b60006101db82602001518360400151610989565b600082600001516001600160a01b031663e098372c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561021a57600080fd5b505afa15801561022e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102529190611308565b90506000816001600160a01b03166380a0f76c6040518163ffffffff1660e01b815260040160606040518083038186803b15801561028f57600080fd5b505afa1580156102a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c7919061150d565b805160208601519192506001600160a01b03161515906000906102e990610a53565b905060006102fa8760400151610a53565b90508261039257600060028860400151896020015161031991906115c1565b610323919061164a565b9050600061033082610a53565b6040516323fbaf6f60e11b81526001600160a01b038083166004830152919250908816906347f75ede90602401600060405180830381600087803b15801561037757600080fd5b505af115801561038b573d6000803e3d6000fd5b5050505050505b60a0870151156103b8576103b88760000151886020015189604001518a60a00151610e79565b60006103c983838a60600151611017565b90506000965087608001511561046c5760208801516040808a01519051635c6651a760e11b81526001600160a01b0389169263b8cca34e926104139233929190879060040161158e565b602060405180830381600087803b15801561042d57600080fd5b505af1158015610441573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610465919061135c565b96506104fb565b60208801516040808a01519051631f2f089360e01b81526001600160a01b03891692631f2f0893926104a69233929190879060040161158e565b602060405180830381600087803b1580156104c057600080fd5b505af11580156104d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f8919061135c565b96505b505050505050919050565b60008060008060008061052187608001518860a00151610989565b600087600001516001600160a01b031663e098372c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561056057600080fd5b505afa158015610574573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105989190611308565b9050876080015160020b60001480156105b6575060a088015160020b155b15610727576000816001600160a01b031663d0c93a7c6040518163ffffffff1660e01b815260040160206040518083038186803b1580156105f657600080fd5b505afa15801561060a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061062e9190611340565b90506000826001600160a01b03166380a0f76c6040518163ffffffff1660e01b815260040160606040518083038186803b15801561066b57600080fd5b505afa15801561067f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a3919061150d565b905060008282602001516106b791906116b7565b905060008383602001516106cb91906115c1565b905062010deb19600283900b12156106e55762010deb1991505b6106f262010deb1961173a565b60020b8160020b131561070f5761070c62010deb1961173a565b90505b600291820b820b60808d0152810b900b60a08b015250505b60c08801511561074d5761074d886000015189608001518a60a001518b60c00151610e79565b600088602001511561076d57610766896040015161106a565b9050610786565b61077a896040015161106a565b6107839061175b565b90505b60006040518060a00160405280336001600160a01b031681526020018381526020018b606001516001600160a01b03166000146107c7578b60600151610805565b8b60200151156107ee576107e960016c1fa71f3f5f68a90479ee3f8fec6116fe565b610805565b6108056b0816769404766de590afe04e6001611607565b6001600160a01b031681526020018b6080015160020b81526020018b60a0015160020b8152509050826001600160a01b03166367758e6e826040518263ffffffff1660e01b81526004016108a09190600060a08201905060018060a01b038084511683526020840151602084015280604085015116604084015250606083015160020b6060830152608083015160020b608083015292915050565b60a060405180830381600087803b1580156108ba57600080fd5b505af11580156108ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f29190611374565b809950819a50829b50839c50849d505050505050826001600160a01b03166380a0f76c6040518163ffffffff1660e01b815260040160606040518083038186803b15801561093f57600080fd5b505afa158015610953573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610977919061150d565b60200151935050505091939550919395565b8060020b8260020b126109c95760405162461bcd60e51b8152602060048201526003602482015262544c5560e81b60448201526064015b60405180910390fd5b62010deb19600283900b1215610a075760405162461bcd60e51b8152602060048201526003602482015262544c4d60e81b60448201526064016109c0565b610a1462010deb1961173a565b60020b8160020b1315610a4f5760405162461bcd60e51b815260206004820152600360248201526254554d60e81b60448201526064016109c0565b5050565b60008060008360020b12610a6a578260020b610a77565b8260020b610a779061175b565b9050610a8662010deb1961173a565b60020b811115610ad05760405162461bcd60e51b81526020600482015260156024820152747469636b206f757473696465206f662072616e676560581b60448201526064016109c0565b600060018216610ae457600160801b610af6565b6ffffcb933bd6fad37aa2d162d1a5940015b6001600160881b031690506002821615610b2b576080610b26826ffff97272373d413259a46990580e213a611698565b901c90505b6004821615610b55576080610b50826ffff2e50f5f656932ef12357cf3c7fdcc611698565b901c90505b6008821615610b7f576080610b7a826fffe5caca7e10e4e61c3624eaa0941cd0611698565b901c90505b6010821615610ba9576080610ba4826fffcb9843d60f6159c9db58835c926644611698565b901c90505b6020821615610bd3576080610bce826fff973b41fa98c081472e6896dfb254c0611698565b901c90505b6040821615610bfd576080610bf8826fff2ea16466c96a3843ec78b326b52861611698565b901c90505b6080821615610c27576080610c22826ffe5dee046a99a2a811c461f1969c3053611698565b901c90505b610100821615610c52576080610c4d826ffcbe86c7900a88aedcffc83b479aa3a4611698565b901c90505b610200821615610c7d576080610c78826ff987a7253ac413176f2b074cf7815e54611698565b901c90505b610400821615610ca8576080610ca3826ff3392b0822b70005940c7a398e4b70f3611698565b901c90505b610800821615610cd3576080610cce826fe7159475a2c29b7443b29c7fa6e889d9611698565b901c90505b611000821615610cfe576080610cf9826fd097f3bdfd2022b8845ad8f792aa5825611698565b901c90505b612000821615610d29576080610d24826fa9f746462d870fdf8a65dc1f90e061e5611698565b901c90505b614000821615610d54576080610d4f826f70d869a156d2a1b890bb3df62baf32f7611698565b901c90505b618000821615610d7f576080610d7a826f31be135f97d08fd981231505542fcfa6611698565b901c90505b62010000821615610dab576080610da6826f09aa508b5b7a84e1c677de54f3e99bc9611698565b901c90505b62020000821615610dd6576080610dd1826e5d6af8dedb81196699c329225ee604611698565b901c90505b62040000821615610e00576080610dfb826d2216e584f5fa1ea926041bedfe98611698565b901c90505b62080000821615610e28576080610e23826b048a170391f7dc42444e8fa2611698565b901c90505b60008460020b1315610e4357610e4081600019611684565b90505b610e51600160201b82611726565b15610e5d576001610e60565b60005b610e719060ff16602083901c611632565b949350505050565b6000846001600160a01b0316632495a5996040518163ffffffff1660e01b815260040160206040518083038186803b158015610eb457600080fd5b505afa158015610ec8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eec9190611308565b9050610f036001600160a01b0382163330856110d8565b60405163095ea7b360e01b81526001600160a01b0386811660048301526024820184905282169063095ea7b390604401602060405180830381600087803b158015610f4d57600080fd5b505af1158015610f61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f8591906112ec565b50846001600160a01b0316637717797f338686610fa18761106a565b6040516001600160e01b031960e087901b1681526001600160a01b039094166004850152600292830b6024850152910b60448301526064820152608401600060405180830381600087803b158015610ff857600080fd5b505af115801561100c573d6000803e3d6000fd5b505050505050505050565b6000826001600160a01b0316846001600160a01b03161115611037579192915b61106061105b83600160601b61104d88886116fe565b6001600160a01b031661116c565b61127f565b90505b9392505050565b60006001600160ff1b038211156110d45760405162461bcd60e51b815260206004820152602860248201527f53616665436173743a2076616c756520646f65736e27742066697420696e2061604482015267371034b73a191a9b60c11b60648201526084016109c0565b5090565b60006040516323b872dd60e01b81526001600160a01b03851660048201526001600160a01b038416602482015282604482015260008060648360008a5af19150506111228161129a565b6111655760405162461bcd60e51b81526020600482015260146024820152731514905394d1915497d19493d357d1905253115160621b60448201526064016109c0565b5050505050565b6000808060001985870985870292508281108382030391505080600014156111dc57600084116111d15760405162461bcd60e51b815260206004820152601060248201526f4469766973696f6e206279207a65726f60801b60448201526064016109c0565b508290049050611063565b8084116112165760405162461bcd60e51b81526020600482015260086024820152676f766572666c6f7760c01b60448201526064016109c0565b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b806001600160801b038116811461129557600080fd5b919050565b60003d826112ac57806000803e806000fd5b80602081146112c45780156112d557600092506112da565b816000803e600051151592506112da565b600192505b5050919050565b8035611295816117c7565b6000602082840312156112fd578081fd5b8151611063816117a1565b600060208284031215611319578081fd5b8151611063816117b2565b600060208284031215611335578081fd5b8135611063816117b2565b600060208284031215611351578081fd5b8151611063816117c7565b60006020828403121561136d578081fd5b5051919050565b600080600080600060a0868803121561138b578081fd5b5050835160208501516040860151606087015160809097015192989197509594509092509050565b600060c082840312156113c4578081fd5b60405160c081016001600160401b03811182821017156113f257634e487b7160e01b83526041600452602483fd5b6040528235611400816117b2565b81526020830135611410816117c7565b60208201526040830135611423816117c7565b6040820152606083810135908201526080830135611440816117a1565b608082015260a0928301359281019290925250919050565b600060e08284031215611469578081fd5b60405160e081016001600160401b038111828210171561149757634e487b7160e01b83526041600452602483fd5b60405282356114a5816117b2565b815260208301356114b5816117a1565b60208201526040838101359082015260608301356114d2816117b2565b60608201526114e3608084016112e1565b60808201526114f460a084016112e1565b60a082015260c083013560c08201528091505092915050565b60006060828403121561151e578081fd5b604051606081016001600160401b038111828210171561154c57634e487b7160e01b83526041600452602483fd5b604052825161155a816117b2565b8152602083015161156a816117c7565b6020820152604083015160ff81168114611582578283fd5b60408201529392505050565b6001600160a01b03949094168452600292830b6020850152910b60408301526001600160801b0316606082015260800190565b60008160020b8360020b82821282627fffff038213811516156115e6576115e6611775565b82627fffff190382128116156115fe576115fe611775565b50019392505050565b60006001600160a01b0382811684821680830382111561162957611629611775565b01949350505050565b6000821982111561164557611645611775565b500190565b60008160020b8360020b806116615761166161178b565b627fffff1982146000198214161561167b5761167b611775565b90059392505050565b6000826116935761169361178b565b500490565b60008160001904831182151516156116b2576116b2611775565b500290565b60008160020b8360020b82811281627fffff19018312811516156116dd576116dd611775565b81627fffff0183138116156116f4576116f4611775565b5090039392505050565b60006001600160a01b038381169083168181101561171e5761171e611775565b039392505050565b6000826117355761173561178b565b500690565b60008160020b627fffff1981141561175457611754611775565b9003919050565b6000600160ff1b82141561177157611771611775565b0390565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b80151581146117af57600080fd5b50565b6001600160a01b03811681146117af57600080fd5b8060020b81146117af57600080fdfea2646970667358221220316ff571140f17a4b19f329b007753a8f5a534c07631f3ad50e142ef38884c3d64736f6c63430008040033";

export class Periphery__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Periphery> {
    return super.deploy(overrides || {}) as Promise<Periphery>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Periphery {
    return super.attach(address) as Periphery;
  }
  connect(signer: Signer): Periphery__factory {
    return super.connect(signer) as Periphery__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PeripheryInterface {
    return new utils.Interface(_abi) as PeripheryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Periphery {
    return new Contract(address, _abi, signerOrProvider) as Periphery;
  }
}
