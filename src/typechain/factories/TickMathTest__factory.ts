/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { TickMathTest, TickMathTestInterface } from "../TickMathTest";

const _abi = [
  {
    inputs: [],
    name: "MAX_SQRT_RATIO",
    outputs: [
      {
        internalType: "uint160",
        name: "",
        type: "uint160",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "MIN_SQRT_RATIO",
    outputs: [
      {
        internalType: "uint160",
        name: "",
        type: "uint160",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int24",
        name: "tick",
        type: "int24",
      },
    ],
    name: "getGasCostOfGetSqrtRatioAtTick",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint160",
        name: "sqrtPriceX96",
        type: "uint160",
      },
    ],
    name: "getGasCostOfGetTickAtSqrtRatio",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int24",
        name: "tick",
        type: "int24",
      },
    ],
    name: "getSqrtRatioAtTick",
    outputs: [
      {
        internalType: "uint160",
        name: "",
        type: "uint160",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint160",
        name: "sqrtPriceX96",
        type: "uint160",
      },
    ],
    name: "getTickAtSqrtRatio",
    outputs: [
      {
        internalType: "int24",
        name: "",
        type: "int24",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610b31806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80634f76c058146100675780636d2cc30414610092578063986cfba3146100b9578063a7398eb4146100cc578063b0622f67146100ed578063ee8847ff14610100575b600080fd5b61007a6100753660046108f4565b610112565b60405160029190910b81526020015b60405180910390f35b6c1fa71f3f5f68a90479ee3f8fec5b6040516001600160a01b039091168152602001610089565b6100a16100c73660046108d3565b610123565b6100df6100da3660046108d3565b61012e565b604051908152602001610089565b6100df6100fb3660046108f4565b610150565b6b0816769404766de590afe04e6100a1565b600061011d8261015b565b92915050565b600061011d826104ad565b6000805a905061013d836104ad565b505a6101499082610a69565b9392505050565b6000805a905061013d835b60006b0816769404766de590afe04e6001600160a01b0383161080159061019757506c1fa71f3f5f68a90479ee3f8fec6001600160a01b038316105b6101e15760405162461bcd60e51b81526020600482015260166024820152757072696365206f757473696465206f662072616e676560501b60448201526064015b60405180910390fd5b600160201b600160c01b03602083901b166001600160801b03811160071b81811c6001600160401b03811160061b90811c63ffffffff811160051b90811c61ffff811160041b90811c60ff8111600390811b91821c600f811160021b90811c918211600190811b92831c9790881196179094179092171790911717176080811061027a57610270607f82610a69565b83901c915061028b565b61028581607f610a69565b83901b91505b6000604061029a608084610a2a565b901b9050828302607f1c92508260801c80603f1b8217915083811c935050828302607f1c92508260801c80603e1b8217915083811c935050828302607f1c92508260801c80603d1b8217915083811c935050828302607f1c92508260801c80603c1b8217915083811c935050828302607f1c92508260801c80603b1b8217915083811c935050828302607f1c92508260801c80603a1b8217915083811c935050828302607f1c92508260801c8060391b8217915083811c935050828302607f1c92508260801c8060381b8217915083811c935050828302607f1c92508260801c8060371b8217915083811c935050828302607f1c92508260801c8060361b8217915083811c935050828302607f1c92508260801c8060351b8217915083811c935050828302607f1c92508260801c8060341b8217915083811c935050828302607f1c92508260801c8060331b8217915083811c935050828302607f1c92508260801c8060321b8217915050600081693627a301d71055774c8561041d9190610988565b90506000608061043d6f028f6481ab7f045a5af012a19d003aaa84610a2a565b901d90506000608061045f846fdb2df09e81959a81455e260799a0632f61091b565b901d90508060020b8260020b1461049e57886001600160a01b0316610483826104ad565b6001600160a01b0316111561049857816104a0565b806104a0565b815b9998505050505050505050565b60008060008360020b126104c4578260020b6104d1565b8260020b6104d190610ab5565b90506104e062010deb19610a94565b60020b81111561052a5760405162461bcd60e51b81526020600482015260156024820152747469636b206f757473696465206f662072616e676560581b60448201526064016101d8565b60006001821661053e57600160801b610550565b6ffffcb933bd6fad37aa2d162d1a5940015b6001600160881b031690506002821615610585576080610580826ffff97272373d413259a46990580e213a610a0b565b901c90505b60048216156105af5760806105aa826ffff2e50f5f656932ef12357cf3c7fdcc610a0b565b901c90505b60088216156105d95760806105d4826fffe5caca7e10e4e61c3624eaa0941cd0610a0b565b901c90505b60108216156106035760806105fe826fffcb9843d60f6159c9db58835c926644610a0b565b901c90505b602082161561062d576080610628826fff973b41fa98c081472e6896dfb254c0610a0b565b901c90505b6040821615610657576080610652826fff2ea16466c96a3843ec78b326b52861610a0b565b901c90505b608082161561068157608061067c826ffe5dee046a99a2a811c461f1969c3053610a0b565b901c90505b6101008216156106ac5760806106a7826ffcbe86c7900a88aedcffc83b479aa3a4610a0b565b901c90505b6102008216156106d75760806106d2826ff987a7253ac413176f2b074cf7815e54610a0b565b901c90505b6104008216156107025760806106fd826ff3392b0822b70005940c7a398e4b70f3610a0b565b901c90505b61080082161561072d576080610728826fe7159475a2c29b7443b29c7fa6e889d9610a0b565b901c90505b611000821615610758576080610753826fd097f3bdfd2022b8845ad8f792aa5825610a0b565b901c90505b61200082161561078357608061077e826fa9f746462d870fdf8a65dc1f90e061e5610a0b565b901c90505b6140008216156107ae5760806107a9826f70d869a156d2a1b890bb3df62baf32f7610a0b565b901c90505b6180008216156107d95760806107d4826f31be135f97d08fd981231505542fcfa6610a0b565b901c90505b62010000821615610805576080610800826f09aa508b5b7a84e1c677de54f3e99bc9610a0b565b901c90505b6202000082161561083057608061082b826e5d6af8dedb81196699c329225ee604610a0b565b901c90505b6204000082161561085a576080610855826d2216e584f5fa1ea926041bedfe98610a0b565b901c90505b6208000082161561088257608061087d826b048a170391f7dc42444e8fa2610a0b565b901c90505b60008460020b131561089d5761089a81600019610974565b90505b6108ab600160201b82610a80565b156108b75760016108ba565b60005b6108cb9060ff16602083901c61095c565b949350505050565b6000602082840312156108e4578081fd5b81358060020b8114610149578182fd5b600060208284031215610905578081fd5b81356001600160a01b0381168114610149578182fd5b600080821280156001600160ff1b038490038513161561093d5761093d610acf565b600160ff1b839003841281161561095657610956610acf565b50500190565b6000821982111561096f5761096f610acf565b500190565b60008261098357610983610ae5565b500490565b60006001600160ff1b03818413828413808216868404861116156109ae576109ae610acf565b600160ff1b848712828116878305891216156109cc576109cc610acf565b8587129250878205871284841616156109e7576109e7610acf565b878505871281841616156109fd576109fd610acf565b505050929093029392505050565b6000816000190483118215151615610a2557610a25610acf565b500290565b60008083128015600160ff1b850184121615610a4857610a48610acf565b6001600160ff1b0384018313811615610a6357610a63610acf565b50500390565b600082821015610a7b57610a7b610acf565b500390565b600082610a8f57610a8f610ae5565b500690565b60008160020b627fffff19811415610aae57610aae610acf565b9003919050565b6000600160ff1b821415610acb57610acb610acf565b0390565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fdfea26469706673582212201c60f67e9367643334e97aa8bedc7e98ebaa4dcd932f35dcb4c77d9111897d6264736f6c63430008040033";

export class TickMathTest__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TickMathTest> {
    return super.deploy(overrides || {}) as Promise<TickMathTest>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TickMathTest {
    return super.attach(address) as TickMathTest;
  }
  connect(signer: Signer): TickMathTest__factory {
    return super.connect(signer) as TickMathTest__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TickMathTestInterface {
    return new utils.Interface(_abi) as TickMathTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TickMathTest {
    return new Contract(address, _abi, signerOrProvider) as TickMathTest;
  }
}
