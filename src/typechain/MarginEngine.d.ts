/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface MarginEngineInterface extends ethers.utils.Interface {
  functions: {
    "cacheMaxAgeInSeconds()": FunctionFragment;
    "collectProtocol(address,uint256)": FunctionFragment;
    "factory()": FunctionFragment;
    "fcm()": FunctionFragment;
    "getHistoricalApy()": FunctionFragment;
    "getHistoricalApyReadOnly()": FunctionFragment;
    "getPosition(address,int24,int24)": FunctionFragment;
    "getPositionMarginRequirement(address,int24,int24,bool)": FunctionFragment;
    "initialize(address,address,uint256,uint256)": FunctionFragment;
    "liquidatePosition(int24,int24,address)": FunctionFragment;
    "liquidatorRewardWad()": FunctionFragment;
    "owner()": FunctionFragment;
    "paused()": FunctionFragment;
    "rateOracle()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "secondsAgo()": FunctionFragment;
    "setCacheMaxAgeInSeconds(uint256)": FunctionFragment;
    "setFCM(address)": FunctionFragment;
    "setLiquidatorReward(uint256)": FunctionFragment;
    "setMarginCalculatorParameters((uint256,uint256,int256,int256,int256,int256,int256,int256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))": FunctionFragment;
    "setSecondsAgo(uint256)": FunctionFragment;
    "setVAMM(address)": FunctionFragment;
    "settlePosition(int24,int24,address)": FunctionFragment;
    "termEndTimestampWad()": FunctionFragment;
    "termStartTimestampWad()": FunctionFragment;
    "transferMarginToFCMTrader(address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "underlyingToken()": FunctionFragment;
    "updatePositionMargin(address,int24,int24,int256)": FunctionFragment;
    "updatePositionPostVAMMInducedMintBurn((address,int24,int24,int128))": FunctionFragment;
    "updatePositionPostVAMMInducedSwap(address,int24,int24,int256,int256,uint256,int256)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
    "vamm()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "cacheMaxAgeInSeconds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collectProtocol",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(functionFragment: "fcm", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getHistoricalApy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getHistoricalApyReadOnly",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPosition",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPositionMarginRequirement",
    values: [string, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidatePosition",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidatorRewardWad",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rateOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "secondsAgo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCacheMaxAgeInSeconds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setFCM", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setLiquidatorReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMarginCalculatorParameters",
    values: [
      {
        apyUpperMultiplierWad: BigNumberish;
        apyLowerMultiplierWad: BigNumberish;
        sigmaSquaredWad: BigNumberish;
        alphaWad: BigNumberish;
        betaWad: BigNumberish;
        xiUpperWad: BigNumberish;
        xiLowerWad: BigNumberish;
        tMaxWad: BigNumberish;
        devMulLeftUnwindLMWad: BigNumberish;
        devMulRightUnwindLMWad: BigNumberish;
        devMulLeftUnwindIMWad: BigNumberish;
        devMulRightUnwindIMWad: BigNumberish;
        fixedRateDeviationMinLeftUnwindLMWad: BigNumberish;
        fixedRateDeviationMinRightUnwindLMWad: BigNumberish;
        fixedRateDeviationMinLeftUnwindIMWad: BigNumberish;
        fixedRateDeviationMinRightUnwindIMWad: BigNumberish;
        gammaWad: BigNumberish;
        minMarginToIncentiviseLiquidators: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setSecondsAgo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setVAMM", values: [string]): string;
  encodeFunctionData(
    functionFragment: "settlePosition",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "termEndTimestampWad",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "termStartTimestampWad",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferMarginToFCMTrader",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "underlyingToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updatePositionMargin",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePositionPostVAMMInducedMintBurn",
    values: [
      {
        owner: string;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        liquidityDelta: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePositionPostVAMMInducedSwap",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "vamm", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "cacheMaxAgeInSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectProtocol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fcm", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getHistoricalApy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHistoricalApyReadOnly",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositionMarginRequirement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidatePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidatorRewardWad",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rateOracle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "secondsAgo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setCacheMaxAgeInSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFCM", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidatorReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMarginCalculatorParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSecondsAgo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setVAMM", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "settlePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "termEndTimestampWad",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "termStartTimestampWad",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferMarginToFCMTrader",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "underlyingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePositionMargin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePositionPostVAMMInducedMintBurn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePositionPostVAMMInducedSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vamm", data: BytesLike): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "CacheMaxAgeSet(uint256,uint256)": EventFragment;
    "CollectProtocol(address,address,uint256)": EventFragment;
    "FCMSet(address,address)": EventFragment;
    "HistoricalApyWindowSet(uint256,uint256)": EventFragment;
    "LiquidatePosition(address,int24,int24,int256,int256,int256,uint128)": EventFragment;
    "LiquidatorRewardSet(uint256,uint256)": EventFragment;
    "MarginCalculatorParametersSet(tuple,tuple)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "SettlePosition(address,int24,int24,int256,int256,int256,bool)": EventFragment;
    "Unpaused(address)": EventFragment;
    "UpdatePositionMargin(address,int24,int24,int256)": EventFragment;
    "UpdatePositionPostMintBurn(address,int24,int24,uint128)": EventFragment;
    "UpdatePositionPostSwap(address,int24,int24,int256,int256,int256)": EventFragment;
    "Upgraded(address)": EventFragment;
    "VAMMSet(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CacheMaxAgeSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CollectProtocol"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FCMSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HistoricalApyWindowSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidatePosition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidatorRewardSet"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MarginCalculatorParametersSet"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SettlePosition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatePositionMargin"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatePositionPostMintBurn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatePositionPostSwap"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VAMMSet"): EventFragment;
}

export type AdminChangedEvent = TypedEvent<
  [string, string] & { previousAdmin: string; newAdmin: string }
>;

export type BeaconUpgradedEvent = TypedEvent<[string] & { beacon: string }>;

export type CacheMaxAgeSetEvent = TypedEvent<
  [BigNumber, BigNumber] & {
    cacheMaxAgeInSecondsOld: BigNumber;
    cacheMaxAgeInSeconds: BigNumber;
  }
>;

export type CollectProtocolEvent = TypedEvent<
  [string, string, BigNumber] & {
    sender: string;
    recipient: string;
    amount: BigNumber;
  }
>;

export type FCMSetEvent = TypedEvent<
  [string, string] & { fcmOld: string; fcm: string }
>;

export type HistoricalApyWindowSetEvent = TypedEvent<
  [BigNumber, BigNumber] & { secondsAgoOld: BigNumber; secondsAgo: BigNumber }
>;

export type LiquidatePositionEvent = TypedEvent<
  [string, number, number, BigNumber, BigNumber, BigNumber, BigNumber] & {
    owner: string;
    tickLower: number;
    tickUpper: number;
    fixedTokenBalance: BigNumber;
    variableTokenBalance: BigNumber;
    margin: BigNumber;
    liquidity: BigNumber;
  }
>;

export type LiquidatorRewardSetEvent = TypedEvent<
  [BigNumber, BigNumber] & {
    liquidatorRewardWadOld: BigNumber;
    liquidatorRewardWad: BigNumber;
  }
>;

export type MarginCalculatorParametersSetEvent = TypedEvent<
  [
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      apyUpperMultiplierWad: BigNumber;
      apyLowerMultiplierWad: BigNumber;
      sigmaSquaredWad: BigNumber;
      alphaWad: BigNumber;
      betaWad: BigNumber;
      xiUpperWad: BigNumber;
      xiLowerWad: BigNumber;
      tMaxWad: BigNumber;
      devMulLeftUnwindLMWad: BigNumber;
      devMulRightUnwindLMWad: BigNumber;
      devMulLeftUnwindIMWad: BigNumber;
      devMulRightUnwindIMWad: BigNumber;
      fixedRateDeviationMinLeftUnwindLMWad: BigNumber;
      fixedRateDeviationMinRightUnwindLMWad: BigNumber;
      fixedRateDeviationMinLeftUnwindIMWad: BigNumber;
      fixedRateDeviationMinRightUnwindIMWad: BigNumber;
      gammaWad: BigNumber;
      minMarginToIncentiviseLiquidators: BigNumber;
    },
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      apyUpperMultiplierWad: BigNumber;
      apyLowerMultiplierWad: BigNumber;
      sigmaSquaredWad: BigNumber;
      alphaWad: BigNumber;
      betaWad: BigNumber;
      xiUpperWad: BigNumber;
      xiLowerWad: BigNumber;
      tMaxWad: BigNumber;
      devMulLeftUnwindLMWad: BigNumber;
      devMulRightUnwindLMWad: BigNumber;
      devMulLeftUnwindIMWad: BigNumber;
      devMulRightUnwindIMWad: BigNumber;
      fixedRateDeviationMinLeftUnwindLMWad: BigNumber;
      fixedRateDeviationMinRightUnwindLMWad: BigNumber;
      fixedRateDeviationMinLeftUnwindIMWad: BigNumber;
      fixedRateDeviationMinRightUnwindIMWad: BigNumber;
      gammaWad: BigNumber;
      minMarginToIncentiviseLiquidators: BigNumber;
    }
  ] & {
    marginCalculatorParametersOld: [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      apyUpperMultiplierWad: BigNumber;
      apyLowerMultiplierWad: BigNumber;
      sigmaSquaredWad: BigNumber;
      alphaWad: BigNumber;
      betaWad: BigNumber;
      xiUpperWad: BigNumber;
      xiLowerWad: BigNumber;
      tMaxWad: BigNumber;
      devMulLeftUnwindLMWad: BigNumber;
      devMulRightUnwindLMWad: BigNumber;
      devMulLeftUnwindIMWad: BigNumber;
      devMulRightUnwindIMWad: BigNumber;
      fixedRateDeviationMinLeftUnwindLMWad: BigNumber;
      fixedRateDeviationMinRightUnwindLMWad: BigNumber;
      fixedRateDeviationMinLeftUnwindIMWad: BigNumber;
      fixedRateDeviationMinRightUnwindIMWad: BigNumber;
      gammaWad: BigNumber;
      minMarginToIncentiviseLiquidators: BigNumber;
    };
    marginCalculatorParameters: [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      apyUpperMultiplierWad: BigNumber;
      apyLowerMultiplierWad: BigNumber;
      sigmaSquaredWad: BigNumber;
      alphaWad: BigNumber;
      betaWad: BigNumber;
      xiUpperWad: BigNumber;
      xiLowerWad: BigNumber;
      tMaxWad: BigNumber;
      devMulLeftUnwindLMWad: BigNumber;
      devMulRightUnwindLMWad: BigNumber;
      devMulLeftUnwindIMWad: BigNumber;
      devMulRightUnwindIMWad: BigNumber;
      fixedRateDeviationMinLeftUnwindLMWad: BigNumber;
      fixedRateDeviationMinRightUnwindLMWad: BigNumber;
      fixedRateDeviationMinLeftUnwindIMWad: BigNumber;
      fixedRateDeviationMinRightUnwindIMWad: BigNumber;
      gammaWad: BigNumber;
      minMarginToIncentiviseLiquidators: BigNumber;
    };
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type PausedEvent = TypedEvent<[string] & { account: string }>;

export type SettlePositionEvent = TypedEvent<
  [string, number, number, BigNumber, BigNumber, BigNumber, boolean] & {
    owner: string;
    tickLower: number;
    tickUpper: number;
    fixedTokenBalance: BigNumber;
    variableTokenBalance: BigNumber;
    margin: BigNumber;
    isSettled: boolean;
  }
>;

export type UnpausedEvent = TypedEvent<[string] & { account: string }>;

export type UpdatePositionMarginEvent = TypedEvent<
  [string, number, number, BigNumber] & {
    owner: string;
    tickLower: number;
    tickUpper: number;
    positionMargin: BigNumber;
  }
>;

export type UpdatePositionPostMintBurnEvent = TypedEvent<
  [string, number, number, BigNumber] & {
    owner: string;
    tickLower: number;
    tickUpper: number;
    liquidity: BigNumber;
  }
>;

export type UpdatePositionPostSwapEvent = TypedEvent<
  [string, number, number, BigNumber, BigNumber, BigNumber] & {
    owner: string;
    tickLower: number;
    tickUpper: number;
    fixedTokenBalance: BigNumber;
    variableTokenBalance: BigNumber;
    margin: BigNumber;
  }
>;

export type UpgradedEvent = TypedEvent<[string] & { implementation: string }>;

export type VAMMSetEvent = TypedEvent<
  [string, string] & { vammOld: string; vamm: string }
>;

export class MarginEngine extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MarginEngineInterface;

  functions: {
    cacheMaxAgeInSeconds(overrides?: CallOverrides): Promise<[BigNumber]>;

    collectProtocol(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    fcm(overrides?: CallOverrides): Promise<[string]>;

    getHistoricalApy(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getHistoricalApyReadOnly(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPosition(
      _owner: string,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getPositionMarginRequirement(
      recipient: string,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      isLM: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(
      __underlyingToken: string,
      __rateOracle: string,
      __termStartTimestampWad: BigNumberish,
      __termEndTimestampWad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    liquidatePosition(
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    liquidatorRewardWad(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    rateOracle(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    secondsAgo(overrides?: CallOverrides): Promise<[BigNumber]>;

    setCacheMaxAgeInSeconds(
      _newCacheMaxAgeInSeconds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFCM(
      _newFCM: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLiquidatorReward(
      _newLiquidatorRewardWad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMarginCalculatorParameters(
      _marginCalculatorParameters: {
        apyUpperMultiplierWad: BigNumberish;
        apyLowerMultiplierWad: BigNumberish;
        sigmaSquaredWad: BigNumberish;
        alphaWad: BigNumberish;
        betaWad: BigNumberish;
        xiUpperWad: BigNumberish;
        xiLowerWad: BigNumberish;
        tMaxWad: BigNumberish;
        devMulLeftUnwindLMWad: BigNumberish;
        devMulRightUnwindLMWad: BigNumberish;
        devMulLeftUnwindIMWad: BigNumberish;
        devMulRightUnwindIMWad: BigNumberish;
        fixedRateDeviationMinLeftUnwindLMWad: BigNumberish;
        fixedRateDeviationMinRightUnwindLMWad: BigNumberish;
        fixedRateDeviationMinLeftUnwindIMWad: BigNumberish;
        fixedRateDeviationMinRightUnwindIMWad: BigNumberish;
        gammaWad: BigNumberish;
        minMarginToIncentiviseLiquidators: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSecondsAgo(
      _newSecondsAgo: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setVAMM(
      _vAMM: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    settlePosition(
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    termEndTimestampWad(overrides?: CallOverrides): Promise<[BigNumber]>;

    termStartTimestampWad(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferMarginToFCMTrader(
      _account: string,
      marginDelta: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    underlyingToken(overrides?: CallOverrides): Promise<[string]>;

    updatePositionMargin(
      _owner: string,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      marginDelta: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updatePositionPostVAMMInducedMintBurn(
      params: {
        owner: string;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        liquidityDelta: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updatePositionPostVAMMInducedSwap(
      _owner: string,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      fixedTokenDelta: BigNumberish,
      variableTokenDelta: BigNumberish,
      cumulativeFeeIncurred: BigNumberish,
      fixedTokenDeltaUnbalanced: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vamm(overrides?: CallOverrides): Promise<[string]>;
  };

  cacheMaxAgeInSeconds(overrides?: CallOverrides): Promise<BigNumber>;

  collectProtocol(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  factory(overrides?: CallOverrides): Promise<string>;

  fcm(overrides?: CallOverrides): Promise<string>;

  getHistoricalApy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getHistoricalApyReadOnly(overrides?: CallOverrides): Promise<BigNumber>;

  getPosition(
    _owner: string,
    tickLower: BigNumberish,
    tickUpper: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getPositionMarginRequirement(
    recipient: string,
    tickLower: BigNumberish,
    tickUpper: BigNumberish,
    isLM: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(
    __underlyingToken: string,
    __rateOracle: string,
    __termStartTimestampWad: BigNumberish,
    __termEndTimestampWad: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  liquidatePosition(
    tickLower: BigNumberish,
    tickUpper: BigNumberish,
    _owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  liquidatorRewardWad(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  rateOracle(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  secondsAgo(overrides?: CallOverrides): Promise<BigNumber>;

  setCacheMaxAgeInSeconds(
    _newCacheMaxAgeInSeconds: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFCM(
    _newFCM: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLiquidatorReward(
    _newLiquidatorRewardWad: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMarginCalculatorParameters(
    _marginCalculatorParameters: {
      apyUpperMultiplierWad: BigNumberish;
      apyLowerMultiplierWad: BigNumberish;
      sigmaSquaredWad: BigNumberish;
      alphaWad: BigNumberish;
      betaWad: BigNumberish;
      xiUpperWad: BigNumberish;
      xiLowerWad: BigNumberish;
      tMaxWad: BigNumberish;
      devMulLeftUnwindLMWad: BigNumberish;
      devMulRightUnwindLMWad: BigNumberish;
      devMulLeftUnwindIMWad: BigNumberish;
      devMulRightUnwindIMWad: BigNumberish;
      fixedRateDeviationMinLeftUnwindLMWad: BigNumberish;
      fixedRateDeviationMinRightUnwindLMWad: BigNumberish;
      fixedRateDeviationMinLeftUnwindIMWad: BigNumberish;
      fixedRateDeviationMinRightUnwindIMWad: BigNumberish;
      gammaWad: BigNumberish;
      minMarginToIncentiviseLiquidators: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSecondsAgo(
    _newSecondsAgo: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setVAMM(
    _vAMM: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  settlePosition(
    tickLower: BigNumberish,
    tickUpper: BigNumberish,
    _owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  termEndTimestampWad(overrides?: CallOverrides): Promise<BigNumber>;

  termStartTimestampWad(overrides?: CallOverrides): Promise<BigNumber>;

  transferMarginToFCMTrader(
    _account: string,
    marginDelta: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  underlyingToken(overrides?: CallOverrides): Promise<string>;

  updatePositionMargin(
    _owner: string,
    tickLower: BigNumberish,
    tickUpper: BigNumberish,
    marginDelta: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updatePositionPostVAMMInducedMintBurn(
    params: {
      owner: string;
      tickLower: BigNumberish;
      tickUpper: BigNumberish;
      liquidityDelta: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updatePositionPostVAMMInducedSwap(
    _owner: string,
    tickLower: BigNumberish,
    tickUpper: BigNumberish,
    fixedTokenDelta: BigNumberish,
    variableTokenDelta: BigNumberish,
    cumulativeFeeIncurred: BigNumberish,
    fixedTokenDeltaUnbalanced: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vamm(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    cacheMaxAgeInSeconds(overrides?: CallOverrides): Promise<BigNumber>;

    collectProtocol(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    factory(overrides?: CallOverrides): Promise<string>;

    fcm(overrides?: CallOverrides): Promise<string>;

    getHistoricalApy(overrides?: CallOverrides): Promise<BigNumber>;

    getHistoricalApyReadOnly(overrides?: CallOverrides): Promise<BigNumber>;

    getPosition(
      _owner: string,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        isSettled: boolean;
        _liquidity: BigNumber;
        margin: BigNumber;
        fixedTokenGrowthInsideLastX128: BigNumber;
        variableTokenGrowthInsideLastX128: BigNumber;
        fixedTokenBalance: BigNumber;
        variableTokenBalance: BigNumber;
        feeGrowthInsideLastX128: BigNumber;
        rewardPerAmount: BigNumber;
      }
    >;

    getPositionMarginRequirement(
      recipient: string,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      isLM: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      __underlyingToken: string,
      __rateOracle: string,
      __termStartTimestampWad: BigNumberish,
      __termEndTimestampWad: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    liquidatePosition(
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      _owner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    liquidatorRewardWad(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    rateOracle(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    secondsAgo(overrides?: CallOverrides): Promise<BigNumber>;

    setCacheMaxAgeInSeconds(
      _newCacheMaxAgeInSeconds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setFCM(_newFCM: string, overrides?: CallOverrides): Promise<void>;

    setLiquidatorReward(
      _newLiquidatorRewardWad: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMarginCalculatorParameters(
      _marginCalculatorParameters: {
        apyUpperMultiplierWad: BigNumberish;
        apyLowerMultiplierWad: BigNumberish;
        sigmaSquaredWad: BigNumberish;
        alphaWad: BigNumberish;
        betaWad: BigNumberish;
        xiUpperWad: BigNumberish;
        xiLowerWad: BigNumberish;
        tMaxWad: BigNumberish;
        devMulLeftUnwindLMWad: BigNumberish;
        devMulRightUnwindLMWad: BigNumberish;
        devMulLeftUnwindIMWad: BigNumberish;
        devMulRightUnwindIMWad: BigNumberish;
        fixedRateDeviationMinLeftUnwindLMWad: BigNumberish;
        fixedRateDeviationMinRightUnwindLMWad: BigNumberish;
        fixedRateDeviationMinLeftUnwindIMWad: BigNumberish;
        fixedRateDeviationMinRightUnwindIMWad: BigNumberish;
        gammaWad: BigNumberish;
        minMarginToIncentiviseLiquidators: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    setSecondsAgo(
      _newSecondsAgo: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setVAMM(_vAMM: string, overrides?: CallOverrides): Promise<void>;

    settlePosition(
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      _owner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    termEndTimestampWad(overrides?: CallOverrides): Promise<BigNumber>;

    termStartTimestampWad(overrides?: CallOverrides): Promise<BigNumber>;

    transferMarginToFCMTrader(
      _account: string,
      marginDelta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    underlyingToken(overrides?: CallOverrides): Promise<string>;

    updatePositionMargin(
      _owner: string,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      marginDelta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePositionPostVAMMInducedMintBurn(
      params: {
        owner: string;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        liquidityDelta: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updatePositionPostVAMMInducedSwap(
      _owner: string,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      fixedTokenDelta: BigNumberish,
      variableTokenDelta: BigNumberish,
      cumulativeFeeIncurred: BigNumberish,
      fixedTokenDeltaUnbalanced: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    vamm(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): TypedEventFilter<
      [string, string],
      { previousAdmin: string; newAdmin: string }
    >;

    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): TypedEventFilter<
      [string, string],
      { previousAdmin: string; newAdmin: string }
    >;

    "BeaconUpgraded(address)"(
      beacon?: string | null
    ): TypedEventFilter<[string], { beacon: string }>;

    BeaconUpgraded(
      beacon?: string | null
    ): TypedEventFilter<[string], { beacon: string }>;

    "CacheMaxAgeSet(uint256,uint256)"(
      cacheMaxAgeInSecondsOld?: null,
      cacheMaxAgeInSeconds?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { cacheMaxAgeInSecondsOld: BigNumber; cacheMaxAgeInSeconds: BigNumber }
    >;

    CacheMaxAgeSet(
      cacheMaxAgeInSecondsOld?: null,
      cacheMaxAgeInSeconds?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { cacheMaxAgeInSecondsOld: BigNumber; cacheMaxAgeInSeconds: BigNumber }
    >;

    "CollectProtocol(address,address,uint256)"(
      sender?: null,
      recipient?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { sender: string; recipient: string; amount: BigNumber }
    >;

    CollectProtocol(
      sender?: null,
      recipient?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { sender: string; recipient: string; amount: BigNumber }
    >;

    "FCMSet(address,address)"(
      fcmOld?: null,
      fcm?: null
    ): TypedEventFilter<[string, string], { fcmOld: string; fcm: string }>;

    FCMSet(
      fcmOld?: null,
      fcm?: null
    ): TypedEventFilter<[string, string], { fcmOld: string; fcm: string }>;

    "HistoricalApyWindowSet(uint256,uint256)"(
      secondsAgoOld?: null,
      secondsAgo?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { secondsAgoOld: BigNumber; secondsAgo: BigNumber }
    >;

    HistoricalApyWindowSet(
      secondsAgoOld?: null,
      secondsAgo?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { secondsAgoOld: BigNumber; secondsAgo: BigNumber }
    >;

    "LiquidatePosition(address,int24,int24,int256,int256,int256,uint128)"(
      owner?: null,
      tickLower?: null,
      tickUpper?: null,
      fixedTokenBalance?: null,
      variableTokenBalance?: null,
      margin?: null,
      liquidity?: null
    ): TypedEventFilter<
      [string, number, number, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        owner: string;
        tickLower: number;
        tickUpper: number;
        fixedTokenBalance: BigNumber;
        variableTokenBalance: BigNumber;
        margin: BigNumber;
        liquidity: BigNumber;
      }
    >;

    LiquidatePosition(
      owner?: null,
      tickLower?: null,
      tickUpper?: null,
      fixedTokenBalance?: null,
      variableTokenBalance?: null,
      margin?: null,
      liquidity?: null
    ): TypedEventFilter<
      [string, number, number, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        owner: string;
        tickLower: number;
        tickUpper: number;
        fixedTokenBalance: BigNumber;
        variableTokenBalance: BigNumber;
        margin: BigNumber;
        liquidity: BigNumber;
      }
    >;

    "LiquidatorRewardSet(uint256,uint256)"(
      liquidatorRewardWadOld?: null,
      liquidatorRewardWad?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { liquidatorRewardWadOld: BigNumber; liquidatorRewardWad: BigNumber }
    >;

    LiquidatorRewardSet(
      liquidatorRewardWadOld?: null,
      liquidatorRewardWad?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { liquidatorRewardWadOld: BigNumber; liquidatorRewardWad: BigNumber }
    >;

    "MarginCalculatorParametersSet(tuple,tuple)"(
      marginCalculatorParametersOld?: null,
      marginCalculatorParameters?: null
    ): TypedEventFilter<
      [
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          apyUpperMultiplierWad: BigNumber;
          apyLowerMultiplierWad: BigNumber;
          sigmaSquaredWad: BigNumber;
          alphaWad: BigNumber;
          betaWad: BigNumber;
          xiUpperWad: BigNumber;
          xiLowerWad: BigNumber;
          tMaxWad: BigNumber;
          devMulLeftUnwindLMWad: BigNumber;
          devMulRightUnwindLMWad: BigNumber;
          devMulLeftUnwindIMWad: BigNumber;
          devMulRightUnwindIMWad: BigNumber;
          fixedRateDeviationMinLeftUnwindLMWad: BigNumber;
          fixedRateDeviationMinRightUnwindLMWad: BigNumber;
          fixedRateDeviationMinLeftUnwindIMWad: BigNumber;
          fixedRateDeviationMinRightUnwindIMWad: BigNumber;
          gammaWad: BigNumber;
          minMarginToIncentiviseLiquidators: BigNumber;
        },
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          apyUpperMultiplierWad: BigNumber;
          apyLowerMultiplierWad: BigNumber;
          sigmaSquaredWad: BigNumber;
          alphaWad: BigNumber;
          betaWad: BigNumber;
          xiUpperWad: BigNumber;
          xiLowerWad: BigNumber;
          tMaxWad: BigNumber;
          devMulLeftUnwindLMWad: BigNumber;
          devMulRightUnwindLMWad: BigNumber;
          devMulLeftUnwindIMWad: BigNumber;
          devMulRightUnwindIMWad: BigNumber;
          fixedRateDeviationMinLeftUnwindLMWad: BigNumber;
          fixedRateDeviationMinRightUnwindLMWad: BigNumber;
          fixedRateDeviationMinLeftUnwindIMWad: BigNumber;
          fixedRateDeviationMinRightUnwindIMWad: BigNumber;
          gammaWad: BigNumber;
          minMarginToIncentiviseLiquidators: BigNumber;
        }
      ],
      {
        marginCalculatorParametersOld: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          apyUpperMultiplierWad: BigNumber;
          apyLowerMultiplierWad: BigNumber;
          sigmaSquaredWad: BigNumber;
          alphaWad: BigNumber;
          betaWad: BigNumber;
          xiUpperWad: BigNumber;
          xiLowerWad: BigNumber;
          tMaxWad: BigNumber;
          devMulLeftUnwindLMWad: BigNumber;
          devMulRightUnwindLMWad: BigNumber;
          devMulLeftUnwindIMWad: BigNumber;
          devMulRightUnwindIMWad: BigNumber;
          fixedRateDeviationMinLeftUnwindLMWad: BigNumber;
          fixedRateDeviationMinRightUnwindLMWad: BigNumber;
          fixedRateDeviationMinLeftUnwindIMWad: BigNumber;
          fixedRateDeviationMinRightUnwindIMWad: BigNumber;
          gammaWad: BigNumber;
          minMarginToIncentiviseLiquidators: BigNumber;
        };
        marginCalculatorParameters: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          apyUpperMultiplierWad: BigNumber;
          apyLowerMultiplierWad: BigNumber;
          sigmaSquaredWad: BigNumber;
          alphaWad: BigNumber;
          betaWad: BigNumber;
          xiUpperWad: BigNumber;
          xiLowerWad: BigNumber;
          tMaxWad: BigNumber;
          devMulLeftUnwindLMWad: BigNumber;
          devMulRightUnwindLMWad: BigNumber;
          devMulLeftUnwindIMWad: BigNumber;
          devMulRightUnwindIMWad: BigNumber;
          fixedRateDeviationMinLeftUnwindLMWad: BigNumber;
          fixedRateDeviationMinRightUnwindLMWad: BigNumber;
          fixedRateDeviationMinLeftUnwindIMWad: BigNumber;
          fixedRateDeviationMinRightUnwindIMWad: BigNumber;
          gammaWad: BigNumber;
          minMarginToIncentiviseLiquidators: BigNumber;
        };
      }
    >;

    MarginCalculatorParametersSet(
      marginCalculatorParametersOld?: null,
      marginCalculatorParameters?: null
    ): TypedEventFilter<
      [
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          apyUpperMultiplierWad: BigNumber;
          apyLowerMultiplierWad: BigNumber;
          sigmaSquaredWad: BigNumber;
          alphaWad: BigNumber;
          betaWad: BigNumber;
          xiUpperWad: BigNumber;
          xiLowerWad: BigNumber;
          tMaxWad: BigNumber;
          devMulLeftUnwindLMWad: BigNumber;
          devMulRightUnwindLMWad: BigNumber;
          devMulLeftUnwindIMWad: BigNumber;
          devMulRightUnwindIMWad: BigNumber;
          fixedRateDeviationMinLeftUnwindLMWad: BigNumber;
          fixedRateDeviationMinRightUnwindLMWad: BigNumber;
          fixedRateDeviationMinLeftUnwindIMWad: BigNumber;
          fixedRateDeviationMinRightUnwindIMWad: BigNumber;
          gammaWad: BigNumber;
          minMarginToIncentiviseLiquidators: BigNumber;
        },
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          apyUpperMultiplierWad: BigNumber;
          apyLowerMultiplierWad: BigNumber;
          sigmaSquaredWad: BigNumber;
          alphaWad: BigNumber;
          betaWad: BigNumber;
          xiUpperWad: BigNumber;
          xiLowerWad: BigNumber;
          tMaxWad: BigNumber;
          devMulLeftUnwindLMWad: BigNumber;
          devMulRightUnwindLMWad: BigNumber;
          devMulLeftUnwindIMWad: BigNumber;
          devMulRightUnwindIMWad: BigNumber;
          fixedRateDeviationMinLeftUnwindLMWad: BigNumber;
          fixedRateDeviationMinRightUnwindLMWad: BigNumber;
          fixedRateDeviationMinLeftUnwindIMWad: BigNumber;
          fixedRateDeviationMinRightUnwindIMWad: BigNumber;
          gammaWad: BigNumber;
          minMarginToIncentiviseLiquidators: BigNumber;
        }
      ],
      {
        marginCalculatorParametersOld: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          apyUpperMultiplierWad: BigNumber;
          apyLowerMultiplierWad: BigNumber;
          sigmaSquaredWad: BigNumber;
          alphaWad: BigNumber;
          betaWad: BigNumber;
          xiUpperWad: BigNumber;
          xiLowerWad: BigNumber;
          tMaxWad: BigNumber;
          devMulLeftUnwindLMWad: BigNumber;
          devMulRightUnwindLMWad: BigNumber;
          devMulLeftUnwindIMWad: BigNumber;
          devMulRightUnwindIMWad: BigNumber;
          fixedRateDeviationMinLeftUnwindLMWad: BigNumber;
          fixedRateDeviationMinRightUnwindLMWad: BigNumber;
          fixedRateDeviationMinLeftUnwindIMWad: BigNumber;
          fixedRateDeviationMinRightUnwindIMWad: BigNumber;
          gammaWad: BigNumber;
          minMarginToIncentiviseLiquidators: BigNumber;
        };
        marginCalculatorParameters: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          apyUpperMultiplierWad: BigNumber;
          apyLowerMultiplierWad: BigNumber;
          sigmaSquaredWad: BigNumber;
          alphaWad: BigNumber;
          betaWad: BigNumber;
          xiUpperWad: BigNumber;
          xiLowerWad: BigNumber;
          tMaxWad: BigNumber;
          devMulLeftUnwindLMWad: BigNumber;
          devMulRightUnwindLMWad: BigNumber;
          devMulLeftUnwindIMWad: BigNumber;
          devMulRightUnwindIMWad: BigNumber;
          fixedRateDeviationMinLeftUnwindLMWad: BigNumber;
          fixedRateDeviationMinRightUnwindLMWad: BigNumber;
          fixedRateDeviationMinLeftUnwindIMWad: BigNumber;
          fixedRateDeviationMinRightUnwindIMWad: BigNumber;
          gammaWad: BigNumber;
          minMarginToIncentiviseLiquidators: BigNumber;
        };
      }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "Paused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Paused(account?: null): TypedEventFilter<[string], { account: string }>;

    "SettlePosition(address,int24,int24,int256,int256,int256,bool)"(
      owner?: null,
      tickLower?: null,
      tickUpper?: null,
      fixedTokenBalance?: null,
      variableTokenBalance?: null,
      margin?: null,
      isSettled?: null
    ): TypedEventFilter<
      [string, number, number, BigNumber, BigNumber, BigNumber, boolean],
      {
        owner: string;
        tickLower: number;
        tickUpper: number;
        fixedTokenBalance: BigNumber;
        variableTokenBalance: BigNumber;
        margin: BigNumber;
        isSettled: boolean;
      }
    >;

    SettlePosition(
      owner?: null,
      tickLower?: null,
      tickUpper?: null,
      fixedTokenBalance?: null,
      variableTokenBalance?: null,
      margin?: null,
      isSettled?: null
    ): TypedEventFilter<
      [string, number, number, BigNumber, BigNumber, BigNumber, boolean],
      {
        owner: string;
        tickLower: number;
        tickUpper: number;
        fixedTokenBalance: BigNumber;
        variableTokenBalance: BigNumber;
        margin: BigNumber;
        isSettled: boolean;
      }
    >;

    "Unpaused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Unpaused(account?: null): TypedEventFilter<[string], { account: string }>;

    "UpdatePositionMargin(address,int24,int24,int256)"(
      owner?: null,
      tickLower?: null,
      tickUpper?: null,
      positionMargin?: null
    ): TypedEventFilter<
      [string, number, number, BigNumber],
      {
        owner: string;
        tickLower: number;
        tickUpper: number;
        positionMargin: BigNumber;
      }
    >;

    UpdatePositionMargin(
      owner?: null,
      tickLower?: null,
      tickUpper?: null,
      positionMargin?: null
    ): TypedEventFilter<
      [string, number, number, BigNumber],
      {
        owner: string;
        tickLower: number;
        tickUpper: number;
        positionMargin: BigNumber;
      }
    >;

    "UpdatePositionPostMintBurn(address,int24,int24,uint128)"(
      owner?: null,
      tickLower?: null,
      tickUpper?: null,
      liquidity?: null
    ): TypedEventFilter<
      [string, number, number, BigNumber],
      {
        owner: string;
        tickLower: number;
        tickUpper: number;
        liquidity: BigNumber;
      }
    >;

    UpdatePositionPostMintBurn(
      owner?: null,
      tickLower?: null,
      tickUpper?: null,
      liquidity?: null
    ): TypedEventFilter<
      [string, number, number, BigNumber],
      {
        owner: string;
        tickLower: number;
        tickUpper: number;
        liquidity: BigNumber;
      }
    >;

    "UpdatePositionPostSwap(address,int24,int24,int256,int256,int256)"(
      owner?: null,
      tickLower?: null,
      tickUpper?: null,
      fixedTokenBalance?: null,
      variableTokenBalance?: null,
      margin?: null
    ): TypedEventFilter<
      [string, number, number, BigNumber, BigNumber, BigNumber],
      {
        owner: string;
        tickLower: number;
        tickUpper: number;
        fixedTokenBalance: BigNumber;
        variableTokenBalance: BigNumber;
        margin: BigNumber;
      }
    >;

    UpdatePositionPostSwap(
      owner?: null,
      tickLower?: null,
      tickUpper?: null,
      fixedTokenBalance?: null,
      variableTokenBalance?: null,
      margin?: null
    ): TypedEventFilter<
      [string, number, number, BigNumber, BigNumber, BigNumber],
      {
        owner: string;
        tickLower: number;
        tickUpper: number;
        fixedTokenBalance: BigNumber;
        variableTokenBalance: BigNumber;
        margin: BigNumber;
      }
    >;

    "Upgraded(address)"(
      implementation?: string | null
    ): TypedEventFilter<[string], { implementation: string }>;

    Upgraded(
      implementation?: string | null
    ): TypedEventFilter<[string], { implementation: string }>;

    "VAMMSet(address,address)"(
      vammOld?: null,
      vamm?: null
    ): TypedEventFilter<[string, string], { vammOld: string; vamm: string }>;

    VAMMSet(
      vammOld?: null,
      vamm?: null
    ): TypedEventFilter<[string, string], { vammOld: string; vamm: string }>;
  };

  estimateGas: {
    cacheMaxAgeInSeconds(overrides?: CallOverrides): Promise<BigNumber>;

    collectProtocol(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    fcm(overrides?: CallOverrides): Promise<BigNumber>;

    getHistoricalApy(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getHistoricalApyReadOnly(overrides?: CallOverrides): Promise<BigNumber>;

    getPosition(
      _owner: string,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getPositionMarginRequirement(
      recipient: string,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      isLM: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize(
      __underlyingToken: string,
      __rateOracle: string,
      __termStartTimestampWad: BigNumberish,
      __termEndTimestampWad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    liquidatePosition(
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    liquidatorRewardWad(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    rateOracle(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    secondsAgo(overrides?: CallOverrides): Promise<BigNumber>;

    setCacheMaxAgeInSeconds(
      _newCacheMaxAgeInSeconds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFCM(
      _newFCM: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLiquidatorReward(
      _newLiquidatorRewardWad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMarginCalculatorParameters(
      _marginCalculatorParameters: {
        apyUpperMultiplierWad: BigNumberish;
        apyLowerMultiplierWad: BigNumberish;
        sigmaSquaredWad: BigNumberish;
        alphaWad: BigNumberish;
        betaWad: BigNumberish;
        xiUpperWad: BigNumberish;
        xiLowerWad: BigNumberish;
        tMaxWad: BigNumberish;
        devMulLeftUnwindLMWad: BigNumberish;
        devMulRightUnwindLMWad: BigNumberish;
        devMulLeftUnwindIMWad: BigNumberish;
        devMulRightUnwindIMWad: BigNumberish;
        fixedRateDeviationMinLeftUnwindLMWad: BigNumberish;
        fixedRateDeviationMinRightUnwindLMWad: BigNumberish;
        fixedRateDeviationMinLeftUnwindIMWad: BigNumberish;
        fixedRateDeviationMinRightUnwindIMWad: BigNumberish;
        gammaWad: BigNumberish;
        minMarginToIncentiviseLiquidators: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSecondsAgo(
      _newSecondsAgo: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setVAMM(
      _vAMM: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    settlePosition(
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    termEndTimestampWad(overrides?: CallOverrides): Promise<BigNumber>;

    termStartTimestampWad(overrides?: CallOverrides): Promise<BigNumber>;

    transferMarginToFCMTrader(
      _account: string,
      marginDelta: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    underlyingToken(overrides?: CallOverrides): Promise<BigNumber>;

    updatePositionMargin(
      _owner: string,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      marginDelta: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updatePositionPostVAMMInducedMintBurn(
      params: {
        owner: string;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        liquidityDelta: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updatePositionPostVAMMInducedSwap(
      _owner: string,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      fixedTokenDelta: BigNumberish,
      variableTokenDelta: BigNumberish,
      cumulativeFeeIncurred: BigNumberish,
      fixedTokenDeltaUnbalanced: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vamm(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    cacheMaxAgeInSeconds(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collectProtocol(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fcm(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getHistoricalApy(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getHistoricalApyReadOnly(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPosition(
      _owner: string,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getPositionMarginRequirement(
      recipient: string,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      isLM: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      __underlyingToken: string,
      __rateOracle: string,
      __termStartTimestampWad: BigNumberish,
      __termEndTimestampWad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    liquidatePosition(
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    liquidatorRewardWad(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rateOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    secondsAgo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setCacheMaxAgeInSeconds(
      _newCacheMaxAgeInSeconds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFCM(
      _newFCM: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLiquidatorReward(
      _newLiquidatorRewardWad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMarginCalculatorParameters(
      _marginCalculatorParameters: {
        apyUpperMultiplierWad: BigNumberish;
        apyLowerMultiplierWad: BigNumberish;
        sigmaSquaredWad: BigNumberish;
        alphaWad: BigNumberish;
        betaWad: BigNumberish;
        xiUpperWad: BigNumberish;
        xiLowerWad: BigNumberish;
        tMaxWad: BigNumberish;
        devMulLeftUnwindLMWad: BigNumberish;
        devMulRightUnwindLMWad: BigNumberish;
        devMulLeftUnwindIMWad: BigNumberish;
        devMulRightUnwindIMWad: BigNumberish;
        fixedRateDeviationMinLeftUnwindLMWad: BigNumberish;
        fixedRateDeviationMinRightUnwindLMWad: BigNumberish;
        fixedRateDeviationMinLeftUnwindIMWad: BigNumberish;
        fixedRateDeviationMinRightUnwindIMWad: BigNumberish;
        gammaWad: BigNumberish;
        minMarginToIncentiviseLiquidators: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSecondsAgo(
      _newSecondsAgo: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setVAMM(
      _vAMM: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    settlePosition(
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    termEndTimestampWad(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    termStartTimestampWad(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferMarginToFCMTrader(
      _account: string,
      marginDelta: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    underlyingToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updatePositionMargin(
      _owner: string,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      marginDelta: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updatePositionPostVAMMInducedMintBurn(
      params: {
        owner: string;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        liquidityDelta: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updatePositionPostVAMMInducedSwap(
      _owner: string,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      fixedTokenDelta: BigNumberish,
      variableTokenDelta: BigNumberish,
      cumulativeFeeIncurred: BigNumberish,
      fixedTokenDeltaUnbalanced: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vamm(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
